{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Biblioteca Java para consumo do WebService de NFe/NFCe D\u00favidas, Sugest\u00f5es ou Consultoria Entre no Discord do Projeto: https://discord.gg/ZXpqnaV Gostou do Projeto? D\u00ea sua colabora\u00e7\u00e3o pelo Pix: 01713390108 Para Iniciar : - Caso use Libs baixe o java-nfe-4.00.18.jar e o adicione \u00e0s bibliotecas de Seu Projeto. Baixe o Schemas.rar e extraia na sua M\u00e1quina. Maven : <dependency> <groupId> br.com.swconsultoria </groupId> <artifactId> java-nfe </artifactId> <version> 4.00.18 </version> </dependency> Gradle : repositories { maven { url = \"https://oss.sonatype.org/content/repositories/snapshots\" } } dependencies { implementation \"br.com.swconsultoria:java-nfe:4.00.18\" }","title":"Inicio"},{"location":"#duvidas-sugestoes-ou-consultoria","text":"","title":"D\u00favidas, Sugest\u00f5es ou Consultoria"},{"location":"#entre-no-discord-do-projeto-httpsdiscordggzxpqnav","text":"","title":"Entre no Discord do Projeto: https://discord.gg/ZXpqnaV"},{"location":"#gostou-do-projeto-de-sua-colaboracao-pelo-pix-01713390108","text":"Para Iniciar : - Caso use Libs baixe o java-nfe-4.00.18.jar e o adicione \u00e0s bibliotecas de Seu Projeto. Baixe o Schemas.rar e extraia na sua M\u00e1quina. Maven : <dependency> <groupId> br.com.swconsultoria </groupId> <artifactId> java-nfe </artifactId> <version> 4.00.18 </version> </dependency> Gradle : repositories { maven { url = \"https://oss.sonatype.org/content/repositories/snapshots\" } } dependencies { implementation \"br.com.swconsultoria:java-nfe:4.00.18\" }","title":"Gostou do Projeto? D\u00ea sua colabora\u00e7\u00e3o pelo Pix: 01713390108"},{"location":"tutorial/baixar-documento/","text":"Baixar Documento (DistDfe) Fun\u00e7\u00e3o para consulta/baixa de NF-e na Sefaz. Exemplo de consulta via NSU e Chave de Acesso: DistribuicaoDFeTeste.java import br.com.swconsultoria.nfe.Nfe ; import br.com.swconsultoria.nfe.dom.ConfiguracoesNfe ; import br.com.swconsultoria.nfe.dom.enuns.* ; import br.com.swconsultoria.nfe.schema.retdistdfeint.RetDistDFeInt ; import br.com.swconsultoria.nfe.schema.retdistdfeint.RetDistDFeInt.LoteDistDFeInt.DocZip ; import br.com.swconsultoria.nfe.util.XmlNfeUtil ; import java.util.List ; /** * @author Samuel Oliveira * */ public class DistribuicaoDFeTeste { public static void main ( String [] args ) { try { // Inicia As Configura\u00e7\u00f5es (1) ConfiguracoesNfe config = Config . iniciaConfiguracoes (); // Informe o CNPJ Do Destinatario (Deve ser o Mesmo do Certificado) String cnpj = \"XXX\" ; RetDistDFeInt retorno ; // Para Consulta Via CHAVE // String chave = \"35170843283811001202550010046314601229130549\"; // retorno = Nfe.distribuicaoDfe(PessoaEnum.JURIDICA, cnpj, ConsultaDFeEnum.CHAVE, chave); // Para Consulta Via NSU String nsu = \"000000000000000\" ; retorno = Nfe . distribuicaoDfe ( config , PessoaEnum . JURIDICA , cnpj , ConsultaDFeEnum . NSU , nsu ); if ( StatusEnum . DOC_LOCALIZADO_PARA_DESTINATARIO . getCodigo (). equals ( retorno . getCStat ())) { System . out . println (); System . out . println ( \"# Status: \" + retorno . getCStat () + \" - \" + retorno . getXMotivo ()); System . out . println ( \"# NSU Atual: \" + retorno . getUltNSU ()); System . out . println ( \"# Max NSU: \" + retorno . getMaxNSU ()); System . out . println ( \"# Max NSU: \" + retorno . getMaxNSU ()); //Aqui Recebe a Lista De XML (No Maximo 50 por Consulta) List < DocZip > listaDoc = retorno . getLoteDistDFeInt (). getDocZip (); for ( DocZip docZip : listaDoc ) { System . out . println (); System . out . println ( \"# Schema: \" + docZip . getSchema ()); switch ( docZip . getSchema ()) { case \"resNFe_v1.01.xsd\" : System . out . println ( \"# Este \u00e9 o XML em resumo, deve ser feito a Manifesta\u00e7\u00e3o para o Objeter o XML Completo.\" ); break ; case \"procNFe_v4.00.xsd\" : System . out . println ( \"# XML Completo.\" ); break ; case \"procEventoNFe_v1.00.xsd\" : System . out . println ( \"# XML Evento.\" ); break ; } //Transforma o GZip em XML String xml = XmlNfeUtil . gZipToXml ( docZip . getValue ()); System . out . println ( \"# XML: \" + xml ); } } else { System . out . println (); System . out . println ( \"# Status: \" + retorno . getCStat () + \" - \" + retorno . getXMotivo ()); } } catch ( Exception e ) { System . err . println (); System . err . println ( \"# Erro: \" + e . getMessage ()); } } } Acesse o menu Configura\u00e7\u00f5es (Certificado)","title":"Baixar Documento (DistDfe)"},{"location":"tutorial/baixar-documento/#baixar-documento-distdfe","text":"Fun\u00e7\u00e3o para consulta/baixa de NF-e na Sefaz.","title":"Baixar Documento (DistDfe)"},{"location":"tutorial/baixar-documento/#exemplo-de-consulta-via-nsu-e-chave-de-acesso","text":"DistribuicaoDFeTeste.java import br.com.swconsultoria.nfe.Nfe ; import br.com.swconsultoria.nfe.dom.ConfiguracoesNfe ; import br.com.swconsultoria.nfe.dom.enuns.* ; import br.com.swconsultoria.nfe.schema.retdistdfeint.RetDistDFeInt ; import br.com.swconsultoria.nfe.schema.retdistdfeint.RetDistDFeInt.LoteDistDFeInt.DocZip ; import br.com.swconsultoria.nfe.util.XmlNfeUtil ; import java.util.List ; /** * @author Samuel Oliveira * */ public class DistribuicaoDFeTeste { public static void main ( String [] args ) { try { // Inicia As Configura\u00e7\u00f5es (1) ConfiguracoesNfe config = Config . iniciaConfiguracoes (); // Informe o CNPJ Do Destinatario (Deve ser o Mesmo do Certificado) String cnpj = \"XXX\" ; RetDistDFeInt retorno ; // Para Consulta Via CHAVE // String chave = \"35170843283811001202550010046314601229130549\"; // retorno = Nfe.distribuicaoDfe(PessoaEnum.JURIDICA, cnpj, ConsultaDFeEnum.CHAVE, chave); // Para Consulta Via NSU String nsu = \"000000000000000\" ; retorno = Nfe . distribuicaoDfe ( config , PessoaEnum . JURIDICA , cnpj , ConsultaDFeEnum . NSU , nsu ); if ( StatusEnum . DOC_LOCALIZADO_PARA_DESTINATARIO . getCodigo (). equals ( retorno . getCStat ())) { System . out . println (); System . out . println ( \"# Status: \" + retorno . getCStat () + \" - \" + retorno . getXMotivo ()); System . out . println ( \"# NSU Atual: \" + retorno . getUltNSU ()); System . out . println ( \"# Max NSU: \" + retorno . getMaxNSU ()); System . out . println ( \"# Max NSU: \" + retorno . getMaxNSU ()); //Aqui Recebe a Lista De XML (No Maximo 50 por Consulta) List < DocZip > listaDoc = retorno . getLoteDistDFeInt (). getDocZip (); for ( DocZip docZip : listaDoc ) { System . out . println (); System . out . println ( \"# Schema: \" + docZip . getSchema ()); switch ( docZip . getSchema ()) { case \"resNFe_v1.01.xsd\" : System . out . println ( \"# Este \u00e9 o XML em resumo, deve ser feito a Manifesta\u00e7\u00e3o para o Objeter o XML Completo.\" ); break ; case \"procNFe_v4.00.xsd\" : System . out . println ( \"# XML Completo.\" ); break ; case \"procEventoNFe_v1.00.xsd\" : System . out . println ( \"# XML Evento.\" ); break ; } //Transforma o GZip em XML String xml = XmlNfeUtil . gZipToXml ( docZip . getValue ()); System . out . println ( \"# XML: \" + xml ); } } else { System . out . println (); System . out . println ( \"# Status: \" + retorno . getCStat () + \" - \" + retorno . getXMotivo ()); } } catch ( Exception e ) { System . err . println (); System . err . println ( \"# Erro: \" + e . getMessage ()); } } } Acesse o menu Configura\u00e7\u00f5es (Certificado)","title":"Exemplo de consulta via NSU e Chave de Acesso:"},{"location":"tutorial/cancelamento/","text":"Cancelamento Fun\u00e7\u00e3o para Cancelar a NFe/NFCe. Cancelar NFe/NFCe. CancelarTeste.java import br.com.swconsultoria.nfe.Nfe ; import br.com.swconsultoria.nfe.dom.ConfiguracoesNfe ; import br.com.swconsultoria.nfe.dom.Evento ; import br.com.swconsultoria.nfe.dom.enuns.DocumentoEnum ; import br.com.swconsultoria.nfe.schema.envEventoCancNFe.TEnvEvento ; import br.com.swconsultoria.nfe.schema.envEventoCancNFe.TRetEnvEvento ; import br.com.swconsultoria.nfe.util.CancelamentoUtil ; import br.com.swconsultoria.nfe.util.RetornoUtil ; import java.time.LocalDateTime ; /** * @author Samuel Oliveira */ public class CancelarTeste { public static void main ( String [] args ) { try { // Inicia As Configura\u00e7\u00f5es (1) ConfiguracoesNfe config = Config . iniciaConfiguracoes (); //Agora o evento pode aceitar uma lista de cancelaemntos para envio em Lote. //Para isso Foi criado o Objeto Cancela Evento cancela = new Evento (); //Informe a chave da Nota a ser Cancelada cancela . setChave ( \"XXX\" ); //Informe o protocolo da Nota a ser Cancelada cancela . setProtocolo ( \"XXX\" ); //Informe o CNPJ do emitente cancela . setCnpj ( \"XXX\" ); //Informe o Motivo do Cancelamento cancela . setMotivo ( \"Teste de Cancelamento\" ); //Informe a data do Cancelamento cancela . setDataEvento ( LocalDateTime . now ()); //Monta o Evento de Cancelamento TEnvEvento enviEvento = CancelamentoUtil . montaCancelamento ( cancela , config ); //Envia o Evento de Cancelamento TRetEnvEvento retorno = Nfe . cancelarNfe ( config , enviEvento , true , DocumentoEnum . NFE ); //Valida o Retorno do Cancelamento RetornoUtil . validaCancelamento ( retorno ); //Resultado System . out . println (); retorno . getRetEvento (). forEach ( resultado -> { System . out . println ( \"# Chave: \" + resultado . getInfEvento (). getChNFe ()); System . out . println ( \"# Status: \" + resultado . getInfEvento (). getCStat () + \" - \" + resultado . getInfEvento (). getXMotivo ()); System . out . println ( \"# Protocolo: \" + resultado . getInfEvento (). getNProt ()); }); //Cria ProcEvento de Cacnelamento String proc = CancelamentoUtil . criaProcEventoCancelamento ( config , enviEvento , retorno . getRetEvento (). get ( 0 )); System . out . println (); System . out . println ( \"# ProcEvento : \" + proc ); } catch ( Exception e ) { System . err . println (); System . err . println ( \"# Erro: \" + e . getMessage ()); } } } Acesse o menu Configura\u00e7\u00f5es (Certificado) Cancelamento Substitui\u00e7\u00e3o (NFCe) CancelarTeste.java import br.com.swconsultoria.nfe.Nfe ; import br.com.swconsultoria.nfe.dom.ConfiguracoesNfe ; import br.com.swconsultoria.nfe.dom.Evento ; import br.com.swconsultoria.nfe.schema.envEventoCancSubst.TEnvEvento ; import br.com.swconsultoria.nfe.schema.envEventoCancSubst.TRetEnvEvento ; import br.com.swconsultoria.nfe.util.CancelamentoSubstituicaoUtil ; import br.com.swconsultoria.nfe.util.RetornoUtil ; import java.time.LocalDateTime ; /** * @author Samuel Oliveira */ public class CancelarSubstituicaoTeste { public static void main ( String [] args ) { try { // Inicia As Configura\u00e7\u00f5es (1) ConfiguracoesNfe config = Config . iniciaConfiguracoes (); //Agora o evento pode aceitar uma lista de cancelaemntos para envio em Lote. //Para isso Foi criado o Objeto Cancela Evento cancela = new Evento (); //Informe a chave da Nota a ser Cancelada cancela . setChave ( \"XXX\" ); //Informe a chave da Nota a Substituta cancela . setChaveSusbstituta ( \"XXX\" ); //Informe o protocolo da Nota a ser Cancelada cancela . setProtocolo ( \"XXX\" ); //Informe o CNPJ do emitente cancela . setCnpj ( \"XXX\" ); //Informe o Motivo do Cancelamento cancela . setMotivo ( \"Teste de Cancelamento\" ); //Informe a data do Cancelamento cancela . setDataEvento ( LocalDateTime . now ()); //Monta o Evento de Cancelamento TEnvEvento enviEvento = CancelamentoSubstituicaoUtil . montaCancelamento ( cancela , config ); //Envia o Evento de Cancelamento TRetEnvEvento retorno = Nfe . cancelarSubstituicaoNfe ( config , enviEvento , true ); //Valida o Retorno do Cancelamento RetornoUtil . validaCancelamentoSubstituicao ( retorno ); //Resultado System . out . println (); retorno . getRetEvento (). forEach ( resultado -> { System . out . println ( \"# Chave: \" + resultado . getInfEvento (). getChNFe ()); System . out . println ( \"# Status: \" + resultado . getInfEvento (). getCStat () + \" - \" + resultado . getInfEvento (). getXMotivo ()); System . out . println ( \"# Protocolo: \" + resultado . getInfEvento (). getNProt ()); }); //Cria ProcEvento de Cacnelamento String proc = CancelamentoSubstituicaoUtil . criaProcEventoCancelamento ( config , enviEvento , retorno . getRetEvento (). get ( 0 )); System . out . println (); System . out . println ( \"# ProcEvento : \" + proc ); } catch ( Exception e ) { System . err . println (); System . err . println ( \"# Erro: \" + e . getMessage ()); } } } Acesse o menu Configura\u00e7\u00f5es (Certificado)","title":"Cancelamento"},{"location":"tutorial/cancelamento/#cancelamento","text":"Fun\u00e7\u00e3o para Cancelar a NFe/NFCe.","title":"Cancelamento"},{"location":"tutorial/cancelamento/#cancelar-nfenfce","text":"CancelarTeste.java import br.com.swconsultoria.nfe.Nfe ; import br.com.swconsultoria.nfe.dom.ConfiguracoesNfe ; import br.com.swconsultoria.nfe.dom.Evento ; import br.com.swconsultoria.nfe.dom.enuns.DocumentoEnum ; import br.com.swconsultoria.nfe.schema.envEventoCancNFe.TEnvEvento ; import br.com.swconsultoria.nfe.schema.envEventoCancNFe.TRetEnvEvento ; import br.com.swconsultoria.nfe.util.CancelamentoUtil ; import br.com.swconsultoria.nfe.util.RetornoUtil ; import java.time.LocalDateTime ; /** * @author Samuel Oliveira */ public class CancelarTeste { public static void main ( String [] args ) { try { // Inicia As Configura\u00e7\u00f5es (1) ConfiguracoesNfe config = Config . iniciaConfiguracoes (); //Agora o evento pode aceitar uma lista de cancelaemntos para envio em Lote. //Para isso Foi criado o Objeto Cancela Evento cancela = new Evento (); //Informe a chave da Nota a ser Cancelada cancela . setChave ( \"XXX\" ); //Informe o protocolo da Nota a ser Cancelada cancela . setProtocolo ( \"XXX\" ); //Informe o CNPJ do emitente cancela . setCnpj ( \"XXX\" ); //Informe o Motivo do Cancelamento cancela . setMotivo ( \"Teste de Cancelamento\" ); //Informe a data do Cancelamento cancela . setDataEvento ( LocalDateTime . now ()); //Monta o Evento de Cancelamento TEnvEvento enviEvento = CancelamentoUtil . montaCancelamento ( cancela , config ); //Envia o Evento de Cancelamento TRetEnvEvento retorno = Nfe . cancelarNfe ( config , enviEvento , true , DocumentoEnum . NFE ); //Valida o Retorno do Cancelamento RetornoUtil . validaCancelamento ( retorno ); //Resultado System . out . println (); retorno . getRetEvento (). forEach ( resultado -> { System . out . println ( \"# Chave: \" + resultado . getInfEvento (). getChNFe ()); System . out . println ( \"# Status: \" + resultado . getInfEvento (). getCStat () + \" - \" + resultado . getInfEvento (). getXMotivo ()); System . out . println ( \"# Protocolo: \" + resultado . getInfEvento (). getNProt ()); }); //Cria ProcEvento de Cacnelamento String proc = CancelamentoUtil . criaProcEventoCancelamento ( config , enviEvento , retorno . getRetEvento (). get ( 0 )); System . out . println (); System . out . println ( \"# ProcEvento : \" + proc ); } catch ( Exception e ) { System . err . println (); System . err . println ( \"# Erro: \" + e . getMessage ()); } } } Acesse o menu Configura\u00e7\u00f5es (Certificado)","title":"Cancelar NFe/NFCe."},{"location":"tutorial/cancelamento/#cancelamento-substituicao-nfce","text":"CancelarTeste.java import br.com.swconsultoria.nfe.Nfe ; import br.com.swconsultoria.nfe.dom.ConfiguracoesNfe ; import br.com.swconsultoria.nfe.dom.Evento ; import br.com.swconsultoria.nfe.schema.envEventoCancSubst.TEnvEvento ; import br.com.swconsultoria.nfe.schema.envEventoCancSubst.TRetEnvEvento ; import br.com.swconsultoria.nfe.util.CancelamentoSubstituicaoUtil ; import br.com.swconsultoria.nfe.util.RetornoUtil ; import java.time.LocalDateTime ; /** * @author Samuel Oliveira */ public class CancelarSubstituicaoTeste { public static void main ( String [] args ) { try { // Inicia As Configura\u00e7\u00f5es (1) ConfiguracoesNfe config = Config . iniciaConfiguracoes (); //Agora o evento pode aceitar uma lista de cancelaemntos para envio em Lote. //Para isso Foi criado o Objeto Cancela Evento cancela = new Evento (); //Informe a chave da Nota a ser Cancelada cancela . setChave ( \"XXX\" ); //Informe a chave da Nota a Substituta cancela . setChaveSusbstituta ( \"XXX\" ); //Informe o protocolo da Nota a ser Cancelada cancela . setProtocolo ( \"XXX\" ); //Informe o CNPJ do emitente cancela . setCnpj ( \"XXX\" ); //Informe o Motivo do Cancelamento cancela . setMotivo ( \"Teste de Cancelamento\" ); //Informe a data do Cancelamento cancela . setDataEvento ( LocalDateTime . now ()); //Monta o Evento de Cancelamento TEnvEvento enviEvento = CancelamentoSubstituicaoUtil . montaCancelamento ( cancela , config ); //Envia o Evento de Cancelamento TRetEnvEvento retorno = Nfe . cancelarSubstituicaoNfe ( config , enviEvento , true ); //Valida o Retorno do Cancelamento RetornoUtil . validaCancelamentoSubstituicao ( retorno ); //Resultado System . out . println (); retorno . getRetEvento (). forEach ( resultado -> { System . out . println ( \"# Chave: \" + resultado . getInfEvento (). getChNFe ()); System . out . println ( \"# Status: \" + resultado . getInfEvento (). getCStat () + \" - \" + resultado . getInfEvento (). getXMotivo ()); System . out . println ( \"# Protocolo: \" + resultado . getInfEvento (). getNProt ()); }); //Cria ProcEvento de Cacnelamento String proc = CancelamentoSubstituicaoUtil . criaProcEventoCancelamento ( config , enviEvento , retorno . getRetEvento (). get ( 0 )); System . out . println (); System . out . println ( \"# ProcEvento : \" + proc ); } catch ( Exception e ) { System . err . println (); System . err . println ( \"# Erro: \" + e . getMessage ()); } } } Acesse o menu Configura\u00e7\u00f5es (Certificado)","title":"Cancelamento Substitui\u00e7\u00e3o (NFCe)"},{"location":"tutorial/cce/","text":"Carta de Corre\u00e7\u00e3o Eletr\u00f4nica Fun\u00e7\u00e3o para Gerar a Carta De Corre\u00e7\u00e3o Eletr\u00f4nica. Envio CartaCorrecaoTeste.java import br.com.swconsultoria.nfe.Nfe ; import br.com.swconsultoria.nfe.dom.ConfiguracoesNfe ; import br.com.swconsultoria.nfe.dom.Evento ; import br.com.swconsultoria.nfe.schema.envcce.TEnvEvento ; import br.com.swconsultoria.nfe.schema.envcce.TRetEnvEvento ; import br.com.swconsultoria.nfe.util.CartaCorrecaoUtil ; import br.com.swconsultoria.nfe.util.RetornoUtil ; import java.time.LocalDateTime ; /** * @author Samuel Oliveira * */ public class CartaCorrecaoTeste { public static void main ( String [] args ) { try { // Inicia As Configura\u00e7\u00f5es (1) ConfiguracoesNfe config = Config . iniciaConfiguracoes (); //Agora o evento pode aceitar uma lista de cancelaemntos para envio em Lote. //Para isso Foi criado o Objeto Cancela Evento cce = new Evento (); //Informe a chave da Nota a ser feita a CArta de Corre\u00e7\u00e3o cce . setChave ( \"XXX\" ); //Informe o CNPJ do emitente cce . setCnpj ( \"XXX\" ); //Informe o Texto da Carta de Corre\u00e7\u00e3o cce . setMotivo ( \"Teste de Carta de Corre\u00e7\u00e3o\" ); //Informe a data da Carta de Corre\u00e7\u00e3o cce . setDataEvento ( LocalDateTime . now ()); //Informe a sequencia do Evento cce . setSequencia ( 1 ); // Monta o Evento TEnvEvento envEvento = CartaCorrecaoUtil . montaCCe ( cce , config ); //Envia a CCe TRetEnvEvento retorno = Nfe . cce ( config , envEvento , true ); //Valida o Retorno do Carta de Corre\u00e7\u00e3o RetornoUtil . validaCartaCorrecao ( retorno ); //Resultado System . out . println (); retorno . getRetEvento (). forEach ( resultado -> { System . out . println ( \"# Chave: \" + resultado . getInfEvento (). getChNFe ()); System . out . println ( \"# Status: \" + resultado . getInfEvento (). getCStat () + \" - \" + resultado . getInfEvento (). getXMotivo ()); System . out . println ( \"# Protocolo: \" + resultado . getInfEvento (). getNProt ()); }); //Cria ProcEvento da CCe String proc = CartaCorrecaoUtil . criaProcEventoCCe ( config , envEvento , retorno ); System . out . println (); System . out . println ( \"# ProcEvento : \" + proc ); } catch ( Exception e ) { System . err . println (); System . err . println ( e . getMessage ()); } } } Acesse o menu Configura\u00e7\u00f5es (Certificado)","title":"Carta de Corre\u00e7\u00e3o Eletr\u00f4nica"},{"location":"tutorial/cce/#carta-de-correcao-eletronica","text":"Fun\u00e7\u00e3o para Gerar a Carta De Corre\u00e7\u00e3o Eletr\u00f4nica.","title":"Carta de Corre\u00e7\u00e3o Eletr\u00f4nica"},{"location":"tutorial/cce/#envio","text":"CartaCorrecaoTeste.java import br.com.swconsultoria.nfe.Nfe ; import br.com.swconsultoria.nfe.dom.ConfiguracoesNfe ; import br.com.swconsultoria.nfe.dom.Evento ; import br.com.swconsultoria.nfe.schema.envcce.TEnvEvento ; import br.com.swconsultoria.nfe.schema.envcce.TRetEnvEvento ; import br.com.swconsultoria.nfe.util.CartaCorrecaoUtil ; import br.com.swconsultoria.nfe.util.RetornoUtil ; import java.time.LocalDateTime ; /** * @author Samuel Oliveira * */ public class CartaCorrecaoTeste { public static void main ( String [] args ) { try { // Inicia As Configura\u00e7\u00f5es (1) ConfiguracoesNfe config = Config . iniciaConfiguracoes (); //Agora o evento pode aceitar uma lista de cancelaemntos para envio em Lote. //Para isso Foi criado o Objeto Cancela Evento cce = new Evento (); //Informe a chave da Nota a ser feita a CArta de Corre\u00e7\u00e3o cce . setChave ( \"XXX\" ); //Informe o CNPJ do emitente cce . setCnpj ( \"XXX\" ); //Informe o Texto da Carta de Corre\u00e7\u00e3o cce . setMotivo ( \"Teste de Carta de Corre\u00e7\u00e3o\" ); //Informe a data da Carta de Corre\u00e7\u00e3o cce . setDataEvento ( LocalDateTime . now ()); //Informe a sequencia do Evento cce . setSequencia ( 1 ); // Monta o Evento TEnvEvento envEvento = CartaCorrecaoUtil . montaCCe ( cce , config ); //Envia a CCe TRetEnvEvento retorno = Nfe . cce ( config , envEvento , true ); //Valida o Retorno do Carta de Corre\u00e7\u00e3o RetornoUtil . validaCartaCorrecao ( retorno ); //Resultado System . out . println (); retorno . getRetEvento (). forEach ( resultado -> { System . out . println ( \"# Chave: \" + resultado . getInfEvento (). getChNFe ()); System . out . println ( \"# Status: \" + resultado . getInfEvento (). getCStat () + \" - \" + resultado . getInfEvento (). getXMotivo ()); System . out . println ( \"# Protocolo: \" + resultado . getInfEvento (). getNProt ()); }); //Cria ProcEvento da CCe String proc = CartaCorrecaoUtil . criaProcEventoCCe ( config , envEvento , retorno ); System . out . println (); System . out . println ( \"# ProcEvento : \" + proc ); } catch ( Exception e ) { System . err . println (); System . err . println ( e . getMessage ()); } } } Acesse o menu Configura\u00e7\u00f5es (Certificado)","title":"Envio"},{"location":"tutorial/configuracoes/","text":"Configura\u00e7\u00f5es Para executar qualquer fun\u00e7\u00e3o NFe/NFCe, deve-se inicializar as Configura\u00e7\u00e3o. Certificado Digital import br.com.swconsultoria.nfe.dom.enuns.EstadosEnum ; import br.com.swconsultoria.nfe.dom.enuns.AmbienteEnum ; public ConfiguracoesNfe iniciaConfigura\u00e7\u00f5es () throws NfeException { Certificado certificado = // Obter certificado (1) return ConfiguracoesNfe . criarConfiguracoes ( EstadosEnum . GO , // (2) AmbienteEnum . HOMOLOGACAO , // (3) certificado , \"C:\\\\SRA\\\\Nfe\\\\Schemas\" // (4) ); } Para obter o c\u00f3digo de uso do certificado, voc\u00ea deve acessar em Java_Certificado Obtendo estado a partir de String EstadosEnum.valueOf(\"GO\") Obtendo ambiente a partir de String AmbienteEnum.getByCodigo(\"2\") Caminho da pasta que se encontra os Schemas Xsd Proxy Para Habilitar o Proxy, ao iniciar as configura\u00e7\u00f5es Adicione as Seguintes Linhas: public static ConfiguracoesIniciaisNfe iniciaConfigura\u00e7\u00f5es () throws NfeException { // Certificado Arquivo, Parametros: -Caminho Certificado, - Senha Certificado certificado = CertificadoService . certificadoPfx ( \"c:/certificado/certificado.pfx\" , \"123456\" ); ConfiguracoesIniciaisNfe config = ConfiguracoesIniciaisNfe . iniciaConfiguracoes ( Estados . GO , ConstantesUtil . AMBIENTE . HOMOLOGACAO , certificado , \"C:\\\\SRA\\\\Nfe\\\\Schemas\" ); String ip = \"192.168.0.1\" ; String porta = \"3128\" ; String usuario = \"\" ; String senha = \"\" ; config . setProxy ( ip , porta , usuario , senha ); return config ; } Conting\u00eancia Scan Para Trabalhar com Conting\u00eancia Scan, ap\u00f3s iniciar as Configura\u00e7\u00f5es Set a Propriedade como True: public static ConfiguracoesIniciaisNfe iniciaConfigura\u00e7\u00f5es () throws NfeException { // Certificado Arquivo, Parametros: -Caminho Certificado, - Senha Certificado certificado = CertificadoService . certificadoPfx ( \"c:/certificado/certificado.pfx\" , \"123456\" ); ConfiguracoesIniciaisNfe config = ConfiguracoesIniciaisNfe . iniciaConfiguracoes ( Estados . GO , ConstantesUtil . AMBIENTE . HOMOLOGACAO , certificado , \"C:\\\\SRA\\\\Nfe\\\\Schemas\" ); config . setContigenciaSCAN ( true ); return config ; }","title":"Configura\u00e7\u00f5es (Certificado)"},{"location":"tutorial/configuracoes/#configuracoes","text":"Para executar qualquer fun\u00e7\u00e3o NFe/NFCe, deve-se inicializar as Configura\u00e7\u00e3o.","title":"Configura\u00e7\u00f5es"},{"location":"tutorial/configuracoes/#certificado-digital","text":"import br.com.swconsultoria.nfe.dom.enuns.EstadosEnum ; import br.com.swconsultoria.nfe.dom.enuns.AmbienteEnum ; public ConfiguracoesNfe iniciaConfigura\u00e7\u00f5es () throws NfeException { Certificado certificado = // Obter certificado (1) return ConfiguracoesNfe . criarConfiguracoes ( EstadosEnum . GO , // (2) AmbienteEnum . HOMOLOGACAO , // (3) certificado , \"C:\\\\SRA\\\\Nfe\\\\Schemas\" // (4) ); } Para obter o c\u00f3digo de uso do certificado, voc\u00ea deve acessar em Java_Certificado Obtendo estado a partir de String EstadosEnum.valueOf(\"GO\") Obtendo ambiente a partir de String AmbienteEnum.getByCodigo(\"2\") Caminho da pasta que se encontra os Schemas Xsd","title":"Certificado Digital"},{"location":"tutorial/configuracoes/#proxy","text":"Para Habilitar o Proxy, ao iniciar as configura\u00e7\u00f5es Adicione as Seguintes Linhas: public static ConfiguracoesIniciaisNfe iniciaConfigura\u00e7\u00f5es () throws NfeException { // Certificado Arquivo, Parametros: -Caminho Certificado, - Senha Certificado certificado = CertificadoService . certificadoPfx ( \"c:/certificado/certificado.pfx\" , \"123456\" ); ConfiguracoesIniciaisNfe config = ConfiguracoesIniciaisNfe . iniciaConfiguracoes ( Estados . GO , ConstantesUtil . AMBIENTE . HOMOLOGACAO , certificado , \"C:\\\\SRA\\\\Nfe\\\\Schemas\" ); String ip = \"192.168.0.1\" ; String porta = \"3128\" ; String usuario = \"\" ; String senha = \"\" ; config . setProxy ( ip , porta , usuario , senha ); return config ; }","title":"Proxy"},{"location":"tutorial/configuracoes/#contingencia-scan","text":"Para Trabalhar com Conting\u00eancia Scan, ap\u00f3s iniciar as Configura\u00e7\u00f5es Set a Propriedade como True: public static ConfiguracoesIniciaisNfe iniciaConfigura\u00e7\u00f5es () throws NfeException { // Certificado Arquivo, Parametros: -Caminho Certificado, - Senha Certificado certificado = CertificadoService . certificadoPfx ( \"c:/certificado/certificado.pfx\" , \"123456\" ); ConfiguracoesIniciaisNfe config = ConfiguracoesIniciaisNfe . iniciaConfiguracoes ( Estados . GO , ConstantesUtil . AMBIENTE . HOMOLOGACAO , certificado , \"C:\\\\SRA\\\\Nfe\\\\Schemas\" ); config . setContigenciaSCAN ( true ); return config ; }","title":"Conting\u00eancia Scan"},{"location":"tutorial/consulta-cadastro/","text":"Consulta Cadastro Fun\u00e7\u00e3o para Consultar o Cadastro do Contribuinte na Sefaz. Consulta Cadastro ConsultaCadastroTeste.java import br.com.swconsultoria.nfe.Nfe ; import br.com.swconsultoria.nfe.dom.ConfiguracoesNfe ; import br.com.swconsultoria.nfe.dom.enuns.EstadosEnum ; import br.com.swconsultoria.nfe.dom.enuns.PessoaEnum ; import br.com.swconsultoria.nfe.schema.retConsCad.TRetConsCad ; import br.com.swconsultoria.nfe.util.RetornoUtil ; /** * @author Samuel Oliveira * */ public class ConsultaCadastroTeste { public static void main ( String [] args ) { try { // Inicia As Configura\u00e7\u00f5es (1) ConfiguracoesNfe config = Config . iniciaConfiguracoes (); //Envia a Consulta TRetConsCad retorno = Nfe . consultaCadastro ( config , PessoaEnum . JURIDICA , \"XXX\" , EstadosEnum . GO ); //Valida o Retorno da Consulta Cadastro RetornoUtil . validaConsultaCadastro ( retorno ); //Resultado System . out . println (); System . out . println ( \"# Status: \" + retorno . getInfCons (). getCStat () + \" - \" + retorno . getInfCons (). getXMotivo ()); System . out . println (); retorno . getInfCons (). getInfCad (). forEach ( cadastro -> { System . out . println ( \"# Raz\u00e3o Social: \" + cadastro . getXNome ()); System . out . println ( \"# Cnpj: \" + cadastro . getCNPJ ()); System . out . println ( \"# Ie: \" + cadastro . getIE ()); }); } catch ( Exception e ) { System . err . println (); System . err . println ( e . getMessage ()); } } } Acesse o menu Configura\u00e7\u00f5es (Certificado)","title":"Consulta Cadastro"},{"location":"tutorial/consulta-cadastro/#consulta-cadastro","text":"Fun\u00e7\u00e3o para Consultar o Cadastro do Contribuinte na Sefaz.","title":"Consulta Cadastro"},{"location":"tutorial/consulta-cadastro/#consulta-cadastro_1","text":"ConsultaCadastroTeste.java import br.com.swconsultoria.nfe.Nfe ; import br.com.swconsultoria.nfe.dom.ConfiguracoesNfe ; import br.com.swconsultoria.nfe.dom.enuns.EstadosEnum ; import br.com.swconsultoria.nfe.dom.enuns.PessoaEnum ; import br.com.swconsultoria.nfe.schema.retConsCad.TRetConsCad ; import br.com.swconsultoria.nfe.util.RetornoUtil ; /** * @author Samuel Oliveira * */ public class ConsultaCadastroTeste { public static void main ( String [] args ) { try { // Inicia As Configura\u00e7\u00f5es (1) ConfiguracoesNfe config = Config . iniciaConfiguracoes (); //Envia a Consulta TRetConsCad retorno = Nfe . consultaCadastro ( config , PessoaEnum . JURIDICA , \"XXX\" , EstadosEnum . GO ); //Valida o Retorno da Consulta Cadastro RetornoUtil . validaConsultaCadastro ( retorno ); //Resultado System . out . println (); System . out . println ( \"# Status: \" + retorno . getInfCons (). getCStat () + \" - \" + retorno . getInfCons (). getXMotivo ()); System . out . println (); retorno . getInfCons (). getInfCad (). forEach ( cadastro -> { System . out . println ( \"# Raz\u00e3o Social: \" + cadastro . getXNome ()); System . out . println ( \"# Cnpj: \" + cadastro . getCNPJ ()); System . out . println ( \"# Ie: \" + cadastro . getIE ()); }); } catch ( Exception e ) { System . err . println (); System . err . println ( e . getMessage ()); } } } Acesse o menu Configura\u00e7\u00f5es (Certificado)","title":"Consulta Cadastro"},{"location":"tutorial/consulta-situacao/","text":"Consulta Situa\u00e7\u00e3o Fun\u00e7\u00e3o para consultar a Situa\u00e7\u00e3o da NF-e na Sefaz. ConsultaXmlTeste.java import br.com.swconsultoria.nfe.Nfe ; import br.com.swconsultoria.nfe.dom.ConfiguracoesNfe ; import br.com.swconsultoria.nfe.dom.enuns.DocumentoEnum ; import br.com.swconsultoria.nfe.schema_4.retConsSitNFe.TRetConsSitNFe ; /** * @author Samuel Oliveira * */ public class ConsultaXmlTeste { public static void main ( String [] args ) { try { // Inicia As Configura\u00e7\u00f5es (1) ConfiguracoesNfe config = Config . iniciaConfiguracoes (); //Informe a chave a ser Consultada String chave = \"52190310732644000128550010000125531000125532\" ; //Efetua a consulta TRetConsSitNFe retorno = Nfe . consultaXml ( config , chave , DocumentoEnum . NFE ); //Resultado System . out . println (); System . out . println ( \"# Status: \" + retorno . getCStat () + \" - \" + retorno . getXMotivo ()); } catch ( Exception e ) { System . err . println (); System . err . println ( e . getMessage ()); } } } Acesse o menu Configura\u00e7\u00f5es (Certificado)","title":"Consulta Situa\u00e7\u00e3o"},{"location":"tutorial/consulta-situacao/#consulta-situacao","text":"Fun\u00e7\u00e3o para consultar a Situa\u00e7\u00e3o da NF-e na Sefaz. ConsultaXmlTeste.java import br.com.swconsultoria.nfe.Nfe ; import br.com.swconsultoria.nfe.dom.ConfiguracoesNfe ; import br.com.swconsultoria.nfe.dom.enuns.DocumentoEnum ; import br.com.swconsultoria.nfe.schema_4.retConsSitNFe.TRetConsSitNFe ; /** * @author Samuel Oliveira * */ public class ConsultaXmlTeste { public static void main ( String [] args ) { try { // Inicia As Configura\u00e7\u00f5es (1) ConfiguracoesNfe config = Config . iniciaConfiguracoes (); //Informe a chave a ser Consultada String chave = \"52190310732644000128550010000125531000125532\" ; //Efetua a consulta TRetConsSitNFe retorno = Nfe . consultaXml ( config , chave , DocumentoEnum . NFE ); //Resultado System . out . println (); System . out . println ( \"# Status: \" + retorno . getCStat () + \" - \" + retorno . getXMotivo ()); } catch ( Exception e ) { System . err . println (); System . err . println ( e . getMessage ()); } } } Acesse o menu Configura\u00e7\u00f5es (Certificado)","title":"Consulta Situa\u00e7\u00e3o"},{"location":"tutorial/envio-epec/","text":"Envio Epec Envio EpecTeste.java import br.com.swconsultoria.nfe.Nfe ; import br.com.swconsultoria.nfe.dom.ConfiguracoesNfe ; import br.com.swconsultoria.nfe.dom.Evento ; import br.com.swconsultoria.nfe.dom.EventoEpec ; import br.com.swconsultoria.nfe.dom.enuns.EstadosEnum ; import br.com.swconsultoria.nfe.schema.envEpec.TEnvEvento ; import br.com.swconsultoria.nfe.schema.envEpec.TRetEnvEvento ; import br.com.swconsultoria.nfe.util.EpecUtil ; import br.com.swconsultoria.nfe.util.RetornoUtil ; import java.time.LocalDateTime ; /** * @author Samuel Oliveira */ public class EpecTeste { public static void main ( String [] args ) { try { // Inicia As Configura\u00e7\u00f5es (1) ConfiguracoesNfe config = Config . iniciaConfiguracoes (); //Agora o evento pode aceitar uma lista de cancelaemntos para envio em Lote. //Para isso Foi criado o Objeto Epec Evento epec = new Evento (); //Informe a chave da Epec epec . setChave ( \"52190310732644000128550010000125491000125491\" ); //Informe o CNPJ do emitente epec . setCnpj ( \"10732644000128\" ); //Informe a data do EPEC epec . setDataEvento ( LocalDateTime . now ()); //Preenche os Dados do Evento EPEC EventoEpec eventoEpec = new EventoEpec (); eventoEpec . setCnpjDestinatario ( \"X\" ); eventoEpec . setvST ( \"X\" ); eventoEpec . setvNF ( \"X\" ); eventoEpec . setvICMS ( \"X\" ); eventoEpec . setTipoNF ( \"X\" ); eventoEpec . setIeEmitente ( \"X\" ); eventoEpec . setIeDestinatario ( \"X\" ); eventoEpec . setEstadoDestinatario ( EstadosEnum . GO ); epec . setEventoEpec ( eventoEpec ); //Monta o Evento de Cancelamento TEnvEvento enviEvento = EpecUtil . montaEpec ( epec , config ); //Envia Evento EPEC TRetEnvEvento retorno = Nfe . enviarEpec ( config , enviEvento , true ); //Valida o Retorno do Cancelamento RetornoUtil . validaEpec ( retorno ); //Resultado System . out . println (); retorno . getRetEvento (). forEach ( resultado -> { System . out . println ( \"# Chave: \" + resultado . getInfEvento (). getChNFe ()); System . out . println ( \"# Status: \" + resultado . getInfEvento (). getCStat () + \" - \" + resultado . getInfEvento (). getXMotivo ()); System . out . println ( \"# Protocolo: \" + resultado . getInfEvento (). getNProt ()); }); //Cria ProcEvento de Cacnelamento String proc = EpecUtil . criaProcEventoEpec ( config , enviEvento , retorno ); System . out . println (); System . out . println ( \"# ProcEvento : \" + proc ); } catch ( Exception e ) { System . err . println (); System . err . println ( \"# Erro: \" + e . getMessage ()); } } }","title":"Envio Epec"},{"location":"tutorial/envio-epec/#envio-epec","text":"","title":"Envio Epec"},{"location":"tutorial/envio-epec/#envio","text":"EpecTeste.java import br.com.swconsultoria.nfe.Nfe ; import br.com.swconsultoria.nfe.dom.ConfiguracoesNfe ; import br.com.swconsultoria.nfe.dom.Evento ; import br.com.swconsultoria.nfe.dom.EventoEpec ; import br.com.swconsultoria.nfe.dom.enuns.EstadosEnum ; import br.com.swconsultoria.nfe.schema.envEpec.TEnvEvento ; import br.com.swconsultoria.nfe.schema.envEpec.TRetEnvEvento ; import br.com.swconsultoria.nfe.util.EpecUtil ; import br.com.swconsultoria.nfe.util.RetornoUtil ; import java.time.LocalDateTime ; /** * @author Samuel Oliveira */ public class EpecTeste { public static void main ( String [] args ) { try { // Inicia As Configura\u00e7\u00f5es (1) ConfiguracoesNfe config = Config . iniciaConfiguracoes (); //Agora o evento pode aceitar uma lista de cancelaemntos para envio em Lote. //Para isso Foi criado o Objeto Epec Evento epec = new Evento (); //Informe a chave da Epec epec . setChave ( \"52190310732644000128550010000125491000125491\" ); //Informe o CNPJ do emitente epec . setCnpj ( \"10732644000128\" ); //Informe a data do EPEC epec . setDataEvento ( LocalDateTime . now ()); //Preenche os Dados do Evento EPEC EventoEpec eventoEpec = new EventoEpec (); eventoEpec . setCnpjDestinatario ( \"X\" ); eventoEpec . setvST ( \"X\" ); eventoEpec . setvNF ( \"X\" ); eventoEpec . setvICMS ( \"X\" ); eventoEpec . setTipoNF ( \"X\" ); eventoEpec . setIeEmitente ( \"X\" ); eventoEpec . setIeDestinatario ( \"X\" ); eventoEpec . setEstadoDestinatario ( EstadosEnum . GO ); epec . setEventoEpec ( eventoEpec ); //Monta o Evento de Cancelamento TEnvEvento enviEvento = EpecUtil . montaEpec ( epec , config ); //Envia Evento EPEC TRetEnvEvento retorno = Nfe . enviarEpec ( config , enviEvento , true ); //Valida o Retorno do Cancelamento RetornoUtil . validaEpec ( retorno ); //Resultado System . out . println (); retorno . getRetEvento (). forEach ( resultado -> { System . out . println ( \"# Chave: \" + resultado . getInfEvento (). getChNFe ()); System . out . println ( \"# Status: \" + resultado . getInfEvento (). getCStat () + \" - \" + resultado . getInfEvento (). getXMotivo ()); System . out . println ( \"# Protocolo: \" + resultado . getInfEvento (). getNProt ()); }); //Cria ProcEvento de Cacnelamento String proc = EpecUtil . criaProcEventoEpec ( config , enviEvento , retorno ); System . out . println (); System . out . println ( \"# ProcEvento : \" + proc ); } catch ( Exception e ) { System . err . println (); System . err . println ( \"# Erro: \" + e . getMessage ()); } } }","title":"Envio"},{"location":"tutorial/envio/","text":"Envio NF-e/NFC-e Envio NF-e (S\u00edncrono) EnvioNfeTeste.java import br.com.swconsultoria.nfe.Nfe ; import br.com.swconsultoria.nfe.dom.ConfiguracoesNfe ; import br.com.swconsultoria.nfe.dom.enuns.AmbienteEnum ; import br.com.swconsultoria.nfe.dom.enuns.DocumentoEnum ; import br.com.swconsultoria.nfe.dom.enuns.EstadosEnum ; import br.com.swconsultoria.nfe.dom.enuns.StatusEnum ; import br.com.swconsultoria.nfe.exception.NfeException ; import br.com.swconsultoria.nfe.schema_4.enviNFe.* ; import br.com.swconsultoria.nfe.schema_4.enviNFe.TNFe.InfNFe ; import br.com.swconsultoria.nfe.schema_4.enviNFe.TNFe.InfNFe.* ; import br.com.swconsultoria.nfe.schema_4.enviNFe.TNFe.InfNFe.Det.Imposto ; import br.com.swconsultoria.nfe.schema_4.enviNFe.TNFe.InfNFe.Det.Imposto.COFINS ; import br.com.swconsultoria.nfe.schema_4.enviNFe.TNFe.InfNFe.Det.Imposto.COFINS.COFINSAliq ; import br.com.swconsultoria.nfe.schema_4.enviNFe.TNFe.InfNFe.Det.Imposto.ICMS ; import br.com.swconsultoria.nfe.schema_4.enviNFe.TNFe.InfNFe.Det.Imposto.PIS ; import br.com.swconsultoria.nfe.schema_4.enviNFe.TNFe.InfNFe.Det.Imposto.PIS.PISAliq ; import br.com.swconsultoria.nfe.schema_4.enviNFe.TNFe.InfNFe.Det.Prod ; import br.com.swconsultoria.nfe.schema_4.enviNFe.TNFe.InfNFe.Total.ICMSTot ; import br.com.swconsultoria.nfe.schema_4.retConsReciNFe.TRetConsReciNFe ; import br.com.swconsultoria.nfe.util.ChaveUtil ; import br.com.swconsultoria.nfe.util.ConstantesUtil ; import br.com.swconsultoria.nfe.util.RetornoUtil ; import br.com.swconsultoria.nfe.util.XmlNfeUtil ; import javax.xml.bind.JAXBElement ; import javax.xml.namespace.QName ; import java.time.LocalDateTime ; import java.util.Collections ; import java.util.List ; /** * @author Samuel Oliveira * */ public class EnvioNfeTeste { public static void main ( String [] args ) { try { // Inicia As Configura\u00e7\u00f5es (1) ConfiguracoesNfe config = Config . iniciaConfiguracoes (); //Informe o Numero da NFe int numeroNfe = XXX ; //Informe o CNPJ do Emitente da NFe String cnpj = \"XXX\" ; //Informe a data de Emissao da NFe LocalDateTime dataEmissao = LocalDateTime . now (); //Informe o cnf da NFe com 8 digitos String cnf = ChaveUtil . completarComZerosAEsquerda ( String . valueOf ( numeroNfe ), 8 ); //Informe o modelo da NFe String modelo = DocumentoEnum . NFE . getModelo (); //Informe a Serie da NFe int serie = 1 ; //Informe o tipo de Emissao da NFe String tipoEmissao = \"1\" ; // MontaChave a NFe ChaveUtil chaveUtil = new ChaveUtil ( config . getEstado (), cnpj , modelo , serie , numeroNfe , tipoEmissao , cnf , dataEmissao ); String chave = chaveUtil . getChaveNF (); String cdv = chaveUtil . getDigitoVerificador (); InfNFe infNFe = new InfNFe (); infNFe . setId ( chave ); infNFe . setVersao ( ConstantesUtil . VERSAO . NFE ); //Preenche IDE infNFe . setIde ( preencheIde ( config , cnf , numeroNfe , tipoEmissao , modelo , serie , cdv , dataEmissao )); //Preenche Emitente infNFe . setEmit ( preencheEmitente ( config , cnpj )); //Preenche o Destinatario infNFe . setDest ( preencheDestinatario ()); //Preenche os dados do Produto da Nfe e adiciona a Lista infNFe . getDet (). addAll ( preencheDet ()); //Preenche totais da NFe infNFe . setTotal ( preencheTotal ()); //Preenche os dados de Transporte infNFe . setTransp ( preencheTransporte ()); // Preenche dados Pagamento infNFe . setPag ( preenchePag ()); TNFe nfe = new TNFe (); nfe . setInfNFe ( infNFe ); // Monta EnviNfe TEnviNFe enviNFe = new TEnviNFe (); enviNFe . setVersao ( ConstantesUtil . VERSAO . NFE ); enviNFe . setIdLote ( \"1\" ); enviNFe . setIndSinc ( \"1\" ); enviNFe . getNFe (). add ( nfe ); // Monta e Assina o XML enviNFe = Nfe . montaNfe ( config , enviNFe , true ); // Envia a Nfe para a Sefaz TRetEnviNFe retorno = Nfe . enviarNfe ( config , enviNFe , DocumentoEnum . NFE ); //Valida se o Retorno \u00e9 Assincrono if ( RetornoUtil . isRetornoAssincrono ( retorno )) { //Pega o Recibo String recibo = retorno . getInfRec (). getNRec (); int tentativa = 0 ; TRetConsReciNFe retornoNfe = null ; //Define Numero de tentativas que ir\u00e1 tentar a Consulta while ( tentativa < 15 ) { retornoNfe = Nfe . consultaRecibo ( config , recibo , DocumentoEnum . NFE ); if ( retornoNfe . getCStat (). equals ( StatusEnum . LOTE_EM_PROCESSAMENTO . getCodigo ())) { System . out . println ( \"INFO: Lote Em Processamento, vai tentar novamente apos 1 Segundo.\" ); Thread . sleep ( 1000 ); tentativa ++ ; } else { break ; } } RetornoUtil . validaAssincrono ( retornoNfe ); System . out . println (); System . out . println ( \"# Status: \" + retornoNfe . getProtNFe (). get ( 0 ). getInfProt (). getCStat () + \" - \" + retornoNfe . getProtNFe (). get ( 0 ). getInfProt (). getXMotivo ()); System . out . println ( \"# Protocolo: \" + retornoNfe . getProtNFe (). get ( 0 ). getInfProt (). getNProt ()); System . out . println ( \"# XML Final: \" + XmlNfeUtil . criaNfeProc ( enviNFe , retornoNfe . getProtNFe (). get ( 0 ))); } else { //Se for else o Retorno \u00e9 Sincrono //Valida Retorno Sincrono RetornoUtil . validaSincrono ( retorno ); System . out . println (); System . out . println ( \"# Status: \" + retorno . getProtNFe (). getInfProt (). getCStat () + \" - \" + retorno . getProtNFe (). getInfProt (). getXMotivo ()); System . out . println ( \"# Protocolo: \" + retorno . getProtNFe (). getInfProt (). getNProt ()); System . out . println ( \"# Xml Final :\" + XmlNfeUtil . criaNfeProc ( enviNFe , retorno . getProtNFe ())); } } catch ( Exception e ) { System . err . println (); System . err . println ( \"# Erro: \" + e . getMessage ()); } } /** * Preenche o IDE * @param config * @param cnf * @param numeroNfe * @param tipoEmissao * @param cDv * @param dataEmissao * @return * @throws NfeException */ private static Ide preencheIde ( ConfiguracoesNfe config , String cnf , int numeroNfe , String tipoEmissao , String modelo , int serie , String cDv , LocalDateTime dataEmissao ) throws NfeException { Ide ide = new Ide (); ide . setCUF ( config . getEstado (). getCodigoIbge ()); ide . setCNF ( cnf ); ide . setNatOp ( \"NOTA FISCAL CONSUMIDOR ELETRONICA\" ); ide . setMod ( modelo ); ide . setSerie ( String . valueOf ( serie )); ide . setNNF ( String . valueOf ( numeroNfe )); ide . setDhEmi ( XmlNfeUtil . dataNfe ( dataEmissao )); ide . setTpNF ( \"1\" ); ide . setIdDest ( \"1\" ); ide . setCMunFG ( \"5219753\" ); ide . setTpImp ( \"1\" ); ide . setTpEmis ( tipoEmissao ); ide . setCDV ( cDv ); ide . setTpAmb ( config . getAmbiente (). getCodigo ()); ide . setFinNFe ( \"1\" ); ide . setIndFinal ( \"1\" ); ide . setIndPres ( \"1\" ); ide . setProcEmi ( \"0\" ); ide . setVerProc ( \"1.0\" ); return ide ; } /** * Preenche o Emitente da Nfe * @param config * @param cnpj * @return */ private static Emit preencheEmitente ( ConfiguracoesNfe config , String cnpj ) { Emit emit = new Emit (); emit . setCNPJ ( cnpj ); emit . setXNome ( \"XXXX\" ); TEnderEmi enderEmit = new TEnderEmi (); enderEmit . setXLgr ( \"AV SANTO ANTONIO & cia\" ); enderEmit . setNro ( \"0\" ); enderEmit . setXCpl ( \"QD 17 LT 01-02-03\" ); enderEmit . setXBairro ( \"PQ STO ANTONIO\" ); enderEmit . setCMun ( \"5219753\" ); enderEmit . setXMun ( \"SANTO ANTONIO DO DESCOBERTO\" ); enderEmit . setUF ( TUfEmi . valueOf ( config . getEstado (). toString ())); enderEmit . setCEP ( \"72900000\" ); enderEmit . setCPais ( \"1058\" ); enderEmit . setXPais ( \"Brasil\" ); enderEmit . setFone ( \"6233215175\" ); emit . setEnderEmit ( enderEmit ); emit . setIE ( \"XXX\" ); emit . setCRT ( \"3\" ); return emit ; } /** * Preenche o Destinatario da NFe * @return */ private static Dest preencheDestinatario () { Dest dest = new Dest (); dest . setCNPJ ( \"XXX\" ); dest . setXNome ( \"NF-E EMITIDA EM AMBIENTE DE HOMOLOGACAO - SEM VALOR FISCAL\" ); TEndereco enderDest = new TEndereco (); enderDest . setXLgr ( \"Rua: Teste\" ); enderDest . setNro ( \"0\" ); enderDest . setXBairro ( \"TESTE\" ); enderDest . setCMun ( \"4109708\" ); enderDest . setXMun ( \"IBAITI\" ); enderDest . setUF ( TUf . valueOf ( \"PR\" )); enderDest . setCEP ( \"84900000\" ); enderDest . setCPais ( \"1058\" ); enderDest . setXPais ( \"Brasil\" ); enderDest . setFone ( \"4845454545\" ); dest . setEnderDest ( enderDest ); dest . setEmail ( \"teste@test\" ); dest . setIndIEDest ( \"9\" ); return dest ; } /** * Preenche Det Nfe */ private static List < Det > preencheDet () { //O Preenchimento deve ser feito por produto, Ent\u00e3o deve ocorrer uma LIsta Det det = new Det (); //O numero do Item deve seguir uma sequencia det . setNItem ( \"1\" ); // Preenche dados do Produto det . setProd ( preencheProduto ()); //Preenche dados do Imposto det . setImposto ( preencheImposto ()); //Retorna a Lista de Det return Collections . singletonList ( det ); } /** * Preenche dados do Produto * @return */ private static Prod preencheProduto () { Prod prod = new Prod (); prod . setCProd ( \"7898480650104\" ); prod . setCEAN ( \"7898480650104\" ); prod . setXProd ( \"NOTA FISCAL EMITIDA EM AMBIENTE DE HOMOLOGACAO - SEM VALOR FISCAL\" ); prod . setNCM ( \"27101932\" ); prod . setCEST ( \"0600500\" ); prod . setIndEscala ( \"S\" ); prod . setCFOP ( \"5405\" ); prod . setUCom ( \"UN\" ); prod . setQCom ( \"1.0000\" ); prod . setVUnCom ( \"13.0000\" ); prod . setVProd ( \"13.00\" ); prod . setCEANTrib ( \"7898480650104\" ); prod . setUTrib ( \"UN\" ); prod . setQTrib ( \"1.0000\" ); prod . setVUnTrib ( \"13.0000\" ); prod . setIndTot ( \"1\" ); return prod ; } /** * Preenche dados do Imposto da Nfe * @return */ private static Imposto preencheImposto () { Imposto imposto = new Imposto (); ICMS icms = new ICMS (); ICMS . ICMS00 icms00 = new ICMS . ICMS00 (); icms00 . setOrig ( \"0\" ); icms00 . setCST ( \"00\" ); icms00 . setModBC ( \"0\" ); icms00 . setVBC ( \"13.00\" ); icms00 . setPICMS ( \"7.00\" ); icms00 . setVICMS ( \"0.91\" ); icms . setICMS00 ( icms00 ); PIS pis = new PIS (); PISAliq pisAliq = new PISAliq (); pisAliq . setCST ( \"01\" ); pisAliq . setVBC ( \"13.00\" ); pisAliq . setPPIS ( \"1.65\" ); pisAliq . setVPIS ( \"0.21\" ); pis . setPISAliq ( pisAliq ); COFINS cofins = new COFINS (); COFINSAliq cofinsAliq = new COFINSAliq (); cofinsAliq . setCST ( \"01\" ); cofinsAliq . setVBC ( \"13.00\" ); cofinsAliq . setPCOFINS ( \"7.60\" ); cofinsAliq . setVCOFINS ( \"0.99\" ); cofins . setCOFINSAliq ( cofinsAliq ); imposto . getContent (). add ( new ObjectFactory (). createTNFeInfNFeDetImpostoICMS ( icms )); imposto . getContent (). add ( new ObjectFactory (). createTNFeInfNFeDetImpostoPIS ( pis )); imposto . getContent (). add ( new ObjectFactory (). createTNFeInfNFeDetImpostoCOFINS ( cofins )); return imposto ; } /** * Prenche Total NFe * @return */ private static Total preencheTotal () { Total total = new Total (); ICMSTot icmstot = new ICMSTot (); icmstot . setVBC ( \"13.00\" ); icmstot . setVICMS ( \"0.91\" ); icmstot . setVICMSDeson ( \"0.00\" ); icmstot . setVFCP ( \"0.00\" ); icmstot . setVFCPST ( \"0.00\" ); icmstot . setVFCPSTRet ( \"0.00\" ); icmstot . setVBCST ( \"0.00\" ); icmstot . setVST ( \"0.00\" ); icmstot . setVProd ( \"13.00\" ); icmstot . setVFrete ( \"0.00\" ); icmstot . setVSeg ( \"0.00\" ); icmstot . setVDesc ( \"0.00\" ); icmstot . setVII ( \"0.00\" ); icmstot . setVIPI ( \"0.00\" ); icmstot . setVIPIDevol ( \"0.00\" ); icmstot . setVPIS ( \"0.21\" ); icmstot . setVCOFINS ( \"0.99\" ); icmstot . setVOutro ( \"0.00\" ); icmstot . setVNF ( \"13.00\" ); total . setICMSTot ( icmstot ); return total ; } /** * Preenche Transporte * @return */ private static Transp preencheTransporte (){ Transp transp = new Transp (); transp . setModFrete ( \"9\" ); return transp ; } /** * Preenche dados Pagamento * @return */ private static Pag preenchePag () { Pag pag = new Pag (); Pag . DetPag detPag = new Pag . DetPag (); detPag . setTPag ( \"01\" ); detPag . setVPag ( \"13.00\" ); pag . getDetPag (). add ( detPag ); return pag ; } } Acesse o menu Configura\u00e7\u00f5es (Certificado) Envio NFC-e (S\u00edncrono) EnvioNfeXmlTeste.java import br.com.swconsultoria.nfe.Nfe ; import br.com.swconsultoria.nfe.dom.ConfiguracoesNfe ; import br.com.swconsultoria.nfe.dom.enuns.* ; import br.com.swconsultoria.nfe.exception.NfeException ; import br.com.swconsultoria.nfe.schema_4.enviNFe.* ; import br.com.swconsultoria.nfe.schema_4.enviNFe.TNFe.InfNFe ; import br.com.swconsultoria.nfe.schema_4.enviNFe.TNFe.InfNFe.* ; import br.com.swconsultoria.nfe.schema_4.enviNFe.TNFe.InfNFe.Det.Imposto ; import br.com.swconsultoria.nfe.schema_4.enviNFe.TNFe.InfNFe.Det.Imposto.COFINS ; import br.com.swconsultoria.nfe.schema_4.enviNFe.TNFe.InfNFe.Det.Imposto.COFINS.COFINSAliq ; import br.com.swconsultoria.nfe.schema_4.enviNFe.TNFe.InfNFe.Det.Imposto.ICMS ; import br.com.swconsultoria.nfe.schema_4.enviNFe.TNFe.InfNFe.Det.Imposto.PIS ; import br.com.swconsultoria.nfe.schema_4.enviNFe.TNFe.InfNFe.Det.Imposto.PIS.PISAliq ; import br.com.swconsultoria.nfe.schema_4.enviNFe.TNFe.InfNFe.Det.Prod ; import br.com.swconsultoria.nfe.schema_4.enviNFe.TNFe.InfNFe.Total.ICMSTot ; import br.com.swconsultoria.nfe.schema_4.retConsReciNFe.TRetConsReciNFe ; import br.com.swconsultoria.nfe.util.* ; import javax.xml.bind.JAXBElement ; import javax.xml.namespace.QName ; import java.security.NoSuchAlgorithmException ; import java.time.LocalDateTime ; import java.util.Collections ; import java.util.List ; /** * @author Samuel Oliveira * */ public class EnvioNfceTeste { public static void main ( String [] args ) { try { // Inicia As Configura\u00e7\u00f5es (1) ConfiguracoesNfe config = Config . iniciaConfiguracoes (); //Informe o Numero da NFCe int numeroNFCe = XXX ; //Informe o CNPJ do Emitente da NFCe String cnpj = \"XXX\" ; //Informe a data de Emissao da NFCe LocalDateTime dataEmissao = LocalDateTime . now (); //Informe o cnf da NFCe com 8 digitos String cnf = ChaveUtil . completarComZerosAEsquerda ( String . valueOf ( numeroNFCe ), 8 ); //Informe o modelo da NFCe String modelo = DocumentoEnum . NFCE . getModelo (); //Informe a Serie da NFCe int serie = 1 ; //Informe o tipo de Emissao da NFCe String tipoEmissao = \"1\" ; //Informe o idToken String idToken = \"XXX\" ; //Informe o CSC da NFCe String csc = \"XXX\" ; // MontaChave a NFCe ChaveUtil chaveUtil = new ChaveUtil ( config . getEstado (), cnpj , modelo , serie , numeroNFCe , tipoEmissao , cnf , dataEmissao ); String chave = chaveUtil . getChaveNF (); String cdv = chaveUtil . getDigitoVerificador (); InfNFe infNFe = new InfNFe (); infNFe . setId ( chave ); infNFe . setVersao ( ConstantesUtil . VERSAO . NFE ); //Preenche IDE infNFe . setIde ( preencheIde ( config , cnf , numeroNFCe , tipoEmissao , modelo , serie , cdv , dataEmissao )); //Preenche Emitente infNFe . setEmit ( preencheEmitente ( config , cnpj )); //Preenche o Destinatario infNFe . setDest ( preencheDestinatario ()); //Preenche os dados do Produto da NFCe e adiciona a Lista infNFe . getDet (). addAll ( preencheDet ()); //Preenche totais da NFCe infNFe . setTotal ( preencheTotal ()); //Preenche os dados de Transporte infNFe . setTransp ( preencheTransporte ()); // Preenche dados Pagamento infNFe . setPag ( preenchePag ()); TNFe nfe = new TNFe (); nfe . setInfNFe ( infNFe ); // Monta EnviNfe TEnviNFe enviNFe = new TEnviNFe (); enviNFe . setVersao ( ConstantesUtil . VERSAO . NFE ); enviNFe . setIdLote ( \"1\" ); enviNFe . setIndSinc ( \"1\" ); enviNFe . getNFe (). add ( nfe ); // Monta e Assina o XML enviNFe = Nfe . montaNfe ( config , enviNFe , true ); //Monta QRCode String qrCode = preencheQRCode ( enviNFe , config , idToken , csc ); TNFe . InfNFeSupl infNFeSupl = new TNFe . InfNFeSupl (); infNFeSupl . setQrCode ( qrCode ); infNFeSupl . setUrlChave ( WebServiceUtil . getUrl ( config , DocumentoEnum . NFCE , ServicosEnum . URL_CONSULTANFCE )); enviNFe . getNFe (). get ( 0 ). setInfNFeSupl ( infNFeSupl ); // Envia a Nfe para a Sefaz TRetEnviNFe retorno = Nfe . enviarNfe ( config , enviNFe , DocumentoEnum . NFCE ); //Valida se o Retorno \u00e9 Assincrono if ( RetornoUtil . isRetornoAssincrono ( retorno )) { //Pega o Recibo String recibo = retorno . getInfRec (). getNRec (); int tentativa = 0 ; TRetConsReciNFe retornoNfe = null ; //Define Numero de tentativas que ir\u00e1 tentar a Consulta while ( tentativa < 15 ) { retornoNfe = Nfe . consultaRecibo ( config , recibo , DocumentoEnum . NFE ); if ( retornoNfe . getCStat (). equals ( StatusEnum . LOTE_EM_PROCESSAMENTO . getCodigo ())) { System . out . println ( \"INFO: Lote Em Processamento, vai tentar novamente apos 1 Segundo.\" ); Thread . sleep ( 1000 ); tentativa ++ ; } else { break ; } } RetornoUtil . validaAssincrono ( retornoNfe ); System . out . println (); System . out . println ( \"# Status: \" + retornoNfe . getProtNFe (). get ( 0 ). getInfProt (). getCStat () + \" - \" + retornoNfe . getProtNFe (). get ( 0 ). getInfProt (). getXMotivo ()); System . out . println ( \"# Protocolo: \" + retornoNfe . getProtNFe (). get ( 0 ). getInfProt (). getNProt ()); System . out . println ( \"# XML Final: \" + XmlNfeUtil . criaNfeProc ( enviNFe , retornoNfe . getProtNFe (). get ( 0 ))); } else { //Se for else o Retorno \u00e9 Sincrono //Valida Retorno Sincrono RetornoUtil . validaSincrono ( retorno ); System . out . println (); System . out . println ( \"# Status: \" + retorno . getProtNFe (). getInfProt (). getCStat () + \" - \" + retorno . getProtNFe (). getInfProt (). getXMotivo ()); System . out . println ( \"# Protocolo: \" + retorno . getProtNFe (). getInfProt (). getNProt ()); System . out . println ( \"# Xml Final :\" + XmlNfeUtil . criaNfeProc ( enviNFe , retorno . getProtNFe ())); } } catch ( Exception e ) { System . err . println (); System . err . println ( \"# Erro: \" + e . getMessage ()); } } /** * Preenche o IDE * @param config * @param cnf * @param numeroNFCe * @param tipoEmissao * @param cDv * @param dataEmissao * @return * @throws NfeException */ private static Ide preencheIde ( ConfiguracoesNfe config , String cnf , int numeroNFCe , String tipoEmissao , String modelo , int serie , String cDv , LocalDateTime dataEmissao ) throws NfeException { Ide ide = new Ide (); ide . setCUF ( config . getEstado (). getCodigoIbge ()); ide . setCNF ( cnf ); ide . setNatOp ( \"NOTA FISCAL CONSUMIDOR ELETRONICA\" ); ide . setMod ( modelo ); ide . setSerie ( String . valueOf ( serie )); ide . setNNF ( String . valueOf ( numeroNFCe )); ide . setDhEmi ( XmlNfeUtil . dataNfe ( dataEmissao )); ide . setTpNF ( \"1\" ); ide . setIdDest ( \"1\" ); ide . setCMunFG ( \"5219753\" ); ide . setTpImp ( \"4\" ); ide . setTpEmis ( tipoEmissao ); ide . setCDV ( cDv ); ide . setTpAmb ( config . getAmbiente (). getCodigo ()); ide . setFinNFe ( \"1\" ); ide . setIndFinal ( \"1\" ); ide . setIndPres ( \"1\" ); ide . setProcEmi ( \"0\" ); ide . setVerProc ( \"1.0\" ); return ide ; } /** * Preenche o Emitente da NFCe * @param config * @param cnpj * @return */ private static Emit preencheEmitente ( ConfiguracoesNfe config , String cnpj ) { Emit emit = new Emit (); emit . setCNPJ ( cnpj ); emit . setXNome ( \"XXX\" ); TEnderEmi enderEmit = new TEnderEmi (); enderEmit . setXLgr ( \"AV SANTO ANTONIO e cia\" ); enderEmit . setNro ( \"0\" ); enderEmit . setXCpl ( \"QD 17 LT 01-02-03\" ); enderEmit . setXBairro ( \"PQ STO ANTONIO\" ); enderEmit . setCMun ( \"5219753\" ); enderEmit . setXMun ( \"SANTO ANTONIO DO DESCOBERTO\" ); enderEmit . setUF ( TUfEmi . valueOf ( config . getEstado (). toString ())); enderEmit . setCEP ( \"72900000\" ); enderEmit . setCPais ( \"1058\" ); enderEmit . setXPais ( \"Brasil\" ); enderEmit . setFone ( \"6233215175\" ); emit . setEnderEmit ( enderEmit ); emit . setIE ( \"XXX\" ); emit . setCRT ( \"3\" ); return emit ; } /** * Preenche o Destinatario da NFCe * @return */ private static Dest preencheDestinatario () { Dest dest = new Dest (); dest . setCNPJ ( \"XXX\" ); dest . setXNome ( \"NF-E EMITIDA EM AMBIENTE DE HOMOLOGACAO - SEM VALOR FISCAL\" ); TEndereco enderDest = new TEndereco (); enderDest . setXLgr ( \"Rua: Teste\" ); enderDest . setNro ( \"0\" ); enderDest . setXBairro ( \"TESTE\" ); enderDest . setCMun ( \"4109708\" ); enderDest . setXMun ( \"IBAITI\" ); enderDest . setUF ( TUf . valueOf ( \"PR\" )); enderDest . setCEP ( \"84900000\" ); enderDest . setCPais ( \"1058\" ); enderDest . setXPais ( \"Brasil\" ); enderDest . setFone ( \"4845454545\" ); dest . setEnderDest ( enderDest ); dest . setEmail ( \"teste@test\" ); dest . setIndIEDest ( \"9\" ); return dest ; } /** * Preenche Det NFCe */ private static List < Det > preencheDet () { //O Preenchimento deve ser feito por produto, Ent\u00e3o deve ocorrer uma LIsta Det det = new Det (); //O numero do Item deve seguir uma sequencia det . setNItem ( \"1\" ); // Preenche dados do Produto det . setProd ( preencheProduto ()); //Preenche dados do Imposto det . setImposto ( preencheImposto ()); //Retorna a Lista de Det return Collections . singletonList ( det ); } /** * Preenche dados do Produto * @return */ private static Prod preencheProduto () { Prod prod = new Prod (); prod . setCProd ( \"7898480650104\" ); prod . setCEAN ( \"7898480650104\" ); prod . setXProd ( \"NOTA FISCAL EMITIDA EM AMBIENTE DE HOMOLOGACAO - SEM VALOR FISCAL\" ); prod . setNCM ( \"27101932\" ); prod . setCEST ( \"0600500\" ); prod . setIndEscala ( \"S\" ); prod . setCFOP ( \"5102\" ); prod . setUCom ( \"UN\" ); prod . setQCom ( \"1.0000\" ); prod . setVUnCom ( \"13.0000\" ); prod . setVProd ( \"13.00\" ); prod . setCEANTrib ( \"7898480650104\" ); prod . setUTrib ( \"UN\" ); prod . setQTrib ( \"1.0000\" ); prod . setVUnTrib ( \"13.0000\" ); prod . setIndTot ( \"1\" ); return prod ; } /** * Preenche dados do Imposto da NFCe * @return */ private static Imposto preencheImposto () { Imposto imposto = new Imposto (); ICMS icms = new ICMS (); ICMS . ICMS00 icms00 = new ICMS . ICMS00 (); icms00 . setOrig ( \"0\" ); icms00 . setCST ( \"00\" ); icms00 . setModBC ( \"0\" ); icms00 . setVBC ( \"13.00\" ); icms00 . setPICMS ( \"7.00\" ); icms00 . setVICMS ( \"0.91\" ); icms . setICMS00 ( icms00 ); PIS pis = new PIS (); PISAliq pisAliq = new PISAliq (); pisAliq . setCST ( \"01\" ); pisAliq . setVBC ( \"13.00\" ); pisAliq . setPPIS ( \"1.65\" ); pisAliq . setVPIS ( \"0.21\" ); pis . setPISAliq ( pisAliq ); COFINS cofins = new COFINS (); COFINSAliq cofinsAliq = new COFINSAliq (); cofinsAliq . setCST ( \"01\" ); cofinsAliq . setVBC ( \"13.00\" ); cofinsAliq . setPCOFINS ( \"7.60\" ); cofinsAliq . setVCOFINS ( \"0.99\" ); cofins . setCOFINSAliq ( cofinsAliq ); JAXBElement < ICMS > icmsElement = new JAXBElement < ICMS > ( new QName ( \"ICMS\" ), ICMS . class , icms ); imposto . getContent (). add ( icmsElement ); JAXBElement < PIS > pisElement = new JAXBElement < PIS > ( new QName ( \"PIS\" ), PIS . class , pis ); imposto . getContent (). add ( pisElement ); JAXBElement < COFINS > cofinsElement = new JAXBElement < COFINS > ( new QName ( \"COFINS\" ), COFINS . class , cofins ); imposto . getContent (). add ( cofinsElement ); return imposto ; } /** * Prenche Total NFCe * @return */ private static Total preencheTotal () { Total total = new Total (); ICMSTot icmstot = new ICMSTot (); icmstot . setVBC ( \"13.00\" ); icmstot . setVICMS ( \"0.91\" ); icmstot . setVICMSDeson ( \"0.00\" ); icmstot . setVFCP ( \"0.00\" ); icmstot . setVFCPST ( \"0.00\" ); icmstot . setVFCPSTRet ( \"0.00\" ); icmstot . setVBCST ( \"0.00\" ); icmstot . setVST ( \"0.00\" ); icmstot . setVProd ( \"13.00\" ); icmstot . setVFrete ( \"0.00\" ); icmstot . setVSeg ( \"0.00\" ); icmstot . setVDesc ( \"0.00\" ); icmstot . setVII ( \"0.00\" ); icmstot . setVIPI ( \"0.00\" ); icmstot . setVIPIDevol ( \"0.00\" ); icmstot . setVPIS ( \"0.21\" ); icmstot . setVCOFINS ( \"0.99\" ); icmstot . setVOutro ( \"0.00\" ); icmstot . setVNF ( \"13.00\" ); total . setICMSTot ( icmstot ); return total ; } /** * Preenche Transporte * @return */ private static Transp preencheTransporte () { Transp transp = new Transp (); transp . setModFrete ( \"9\" ); return transp ; } /** * Preenche dados Pagamento * @return */ private static Pag preenchePag () { Pag pag = new Pag (); Pag . DetPag detPag = new Pag . DetPag (); detPag . setTPag ( \"01\" ); detPag . setVPag ( \"13.00\" ); pag . getDetPag (). add ( detPag ); return pag ; } /** * Preenche QRCode * @param enviNFe * @param config * @param idToken * @param csc * @return * @throws NfeException * @throws NoSuchAlgorithmException */ private static String preencheQRCode ( TEnviNFe enviNFe , ConfiguracoesNfe config , String idToken , String csc ) throws NfeException , NoSuchAlgorithmException { //QRCODE EMISAO ONLINE return NFCeUtil . getCodeQRCode ( enviNFe . getNFe (). get ( 0 ). getInfNFe (). getId (). substring ( 3 ), config . getAmbiente (). getCodigo (), idToken , csc , WebServiceUtil . getUrl ( config , DocumentoEnum . NFCE , ServicosEnum . URL_QRCODE )); //QRCODE EMISSAO OFFLINE // return NFCeUtil.getCodeQRCodeContingencia( // enviNFe.getNFe().get(0).getInfNFe().getId().substring(3), // config.getAmbiente().getCodigo(), // enviNFe.getNFe().get(0).getInfNFe().getIde().getDhEmi(), // enviNFe.getNFe().get(0).getInfNFe().getTotal().getICMSTot().getVNF(), // Base64.getEncoder().encodeToString(enviNFe.getNFe().get(0).getSignature().getSignedInfo().getReference().getDigestValue()), // idToken, // csc, // WebServiceUtil.getUrl(config, DocumentoEnum.NFCE, ServicosEnum.URL_QRCODE)); } } Acesse o menu Configura\u00e7\u00f5es (Certificado) Envio NF-e com arquivo XML EnvioNfeXmlTeste.java import br.com.swconsultoria.nfe.Nfe ; import br.com.swconsultoria.nfe.dom.ConfiguracoesNfe ; import br.com.swconsultoria.nfe.dom.enuns.DocumentoEnum ; import br.com.swconsultoria.nfe.dom.enuns.StatusEnum ; import br.com.swconsultoria.nfe.schema_4.enviNFe.TEnviNFe ; import br.com.swconsultoria.nfe.schema_4.enviNFe.TRetEnviNFe ; import br.com.swconsultoria.nfe.schema_4.retConsReciNFe.TRetConsReciNFe ; import br.com.swconsultoria.nfe.util.RetornoUtil ; import br.com.swconsultoria.nfe.util.XmlNfeUtil ; /** * @author Samuel Oliveira * */ public class EnvioNfeXmlTeste { public static void main ( String [] args ) { try { // Inicia As Configura\u00e7\u00f5es (1) ConfiguracoesNfe config = Config . iniciaConfiguracoes (); String caminhoXML = \"d:/teste/nfe.xml\" ; // Le Xml do Arquivo String xml = XmlNfeUtil . leXml ( caminhoXML ); TEnviNFe enviNFe = XmlNfeUtil . xmlToObject ( xml , TEnviNFe . class ); // Monta e Assina o XML enviNFe = Nfe . montaNfe ( config , enviNFe , true ); // Envia a Nfe para a Sefaz TRetEnviNFe retorno = Nfe . enviarNfe ( config , enviNFe , DocumentoEnum . NFE ); //Valida se o Retorno \u00e9 Assincrono if ( RetornoUtil . isRetornoAssincrono ( retorno )) { //Pega o Recibo String recibo = retorno . getInfRec (). getNRec (); int tentativa = 0 ; TRetConsReciNFe retornoNfe = null ; //Define Numero de tentativas que ir\u00e1 tentar a Consulta while ( tentativa < 15 ) { retornoNfe = Nfe . consultaRecibo ( config , recibo , DocumentoEnum . NFE ); if ( retornoNfe . getCStat (). equals ( StatusEnum . LOTE_EM_PROCESSAMENTO . getCodigo ())) { System . out . println ( \"INFO: Lote Em Processamento, vai tentar novamente apos 1 Segundo.\" ); Thread . sleep ( 1000 ); tentativa ++ ; } else { break ; } } RetornoUtil . validaAssincrono ( retornoNfe ); System . out . println (); System . out . println ( \"# Status: \" + retornoNfe . getProtNFe (). get ( 0 ). getInfProt (). getCStat () + \" - \" + retornoNfe . getProtNFe (). get ( 0 ). getInfProt (). getXMotivo ()); System . out . println ( \"# Protocolo: \" + retornoNfe . getProtNFe (). get ( 0 ). getInfProt (). getNProt ()); System . out . println ( \"# XML Final: \" + XmlNfeUtil . criaNfeProc ( enviNFe , retornoNfe . getProtNFe (). get ( 0 ))); } else { //Se for else o Retorno \u00e9 Sincrono //Valida Retorno Sincrono RetornoUtil . validaSincrono ( retorno ); System . out . println (); System . out . println ( \"# Status: \" + retorno . getProtNFe (). getInfProt (). getCStat () + \" - \" + retorno . getProtNFe (). getInfProt (). getXMotivo ()); System . out . println ( \"# Protocolo: \" + retorno . getProtNFe (). getInfProt (). getNProt ()); System . out . println ( \"# Xml Final : \" + XmlNfeUtil . criaNfeProc ( enviNFe , retorno . getProtNFe ())); } } catch ( Exception e ) { System . err . println (); System . err . println ( \"# Erro: \" + e . getMessage ()); } } } Acesse o menu Configura\u00e7\u00f5es (Certificado)","title":"Envio"},{"location":"tutorial/envio/#envio-nf-enfc-e","text":"","title":"Envio NF-e/NFC-e"},{"location":"tutorial/envio/#envio-nf-e-sincrono","text":"EnvioNfeTeste.java import br.com.swconsultoria.nfe.Nfe ; import br.com.swconsultoria.nfe.dom.ConfiguracoesNfe ; import br.com.swconsultoria.nfe.dom.enuns.AmbienteEnum ; import br.com.swconsultoria.nfe.dom.enuns.DocumentoEnum ; import br.com.swconsultoria.nfe.dom.enuns.EstadosEnum ; import br.com.swconsultoria.nfe.dom.enuns.StatusEnum ; import br.com.swconsultoria.nfe.exception.NfeException ; import br.com.swconsultoria.nfe.schema_4.enviNFe.* ; import br.com.swconsultoria.nfe.schema_4.enviNFe.TNFe.InfNFe ; import br.com.swconsultoria.nfe.schema_4.enviNFe.TNFe.InfNFe.* ; import br.com.swconsultoria.nfe.schema_4.enviNFe.TNFe.InfNFe.Det.Imposto ; import br.com.swconsultoria.nfe.schema_4.enviNFe.TNFe.InfNFe.Det.Imposto.COFINS ; import br.com.swconsultoria.nfe.schema_4.enviNFe.TNFe.InfNFe.Det.Imposto.COFINS.COFINSAliq ; import br.com.swconsultoria.nfe.schema_4.enviNFe.TNFe.InfNFe.Det.Imposto.ICMS ; import br.com.swconsultoria.nfe.schema_4.enviNFe.TNFe.InfNFe.Det.Imposto.PIS ; import br.com.swconsultoria.nfe.schema_4.enviNFe.TNFe.InfNFe.Det.Imposto.PIS.PISAliq ; import br.com.swconsultoria.nfe.schema_4.enviNFe.TNFe.InfNFe.Det.Prod ; import br.com.swconsultoria.nfe.schema_4.enviNFe.TNFe.InfNFe.Total.ICMSTot ; import br.com.swconsultoria.nfe.schema_4.retConsReciNFe.TRetConsReciNFe ; import br.com.swconsultoria.nfe.util.ChaveUtil ; import br.com.swconsultoria.nfe.util.ConstantesUtil ; import br.com.swconsultoria.nfe.util.RetornoUtil ; import br.com.swconsultoria.nfe.util.XmlNfeUtil ; import javax.xml.bind.JAXBElement ; import javax.xml.namespace.QName ; import java.time.LocalDateTime ; import java.util.Collections ; import java.util.List ; /** * @author Samuel Oliveira * */ public class EnvioNfeTeste { public static void main ( String [] args ) { try { // Inicia As Configura\u00e7\u00f5es (1) ConfiguracoesNfe config = Config . iniciaConfiguracoes (); //Informe o Numero da NFe int numeroNfe = XXX ; //Informe o CNPJ do Emitente da NFe String cnpj = \"XXX\" ; //Informe a data de Emissao da NFe LocalDateTime dataEmissao = LocalDateTime . now (); //Informe o cnf da NFe com 8 digitos String cnf = ChaveUtil . completarComZerosAEsquerda ( String . valueOf ( numeroNfe ), 8 ); //Informe o modelo da NFe String modelo = DocumentoEnum . NFE . getModelo (); //Informe a Serie da NFe int serie = 1 ; //Informe o tipo de Emissao da NFe String tipoEmissao = \"1\" ; // MontaChave a NFe ChaveUtil chaveUtil = new ChaveUtil ( config . getEstado (), cnpj , modelo , serie , numeroNfe , tipoEmissao , cnf , dataEmissao ); String chave = chaveUtil . getChaveNF (); String cdv = chaveUtil . getDigitoVerificador (); InfNFe infNFe = new InfNFe (); infNFe . setId ( chave ); infNFe . setVersao ( ConstantesUtil . VERSAO . NFE ); //Preenche IDE infNFe . setIde ( preencheIde ( config , cnf , numeroNfe , tipoEmissao , modelo , serie , cdv , dataEmissao )); //Preenche Emitente infNFe . setEmit ( preencheEmitente ( config , cnpj )); //Preenche o Destinatario infNFe . setDest ( preencheDestinatario ()); //Preenche os dados do Produto da Nfe e adiciona a Lista infNFe . getDet (). addAll ( preencheDet ()); //Preenche totais da NFe infNFe . setTotal ( preencheTotal ()); //Preenche os dados de Transporte infNFe . setTransp ( preencheTransporte ()); // Preenche dados Pagamento infNFe . setPag ( preenchePag ()); TNFe nfe = new TNFe (); nfe . setInfNFe ( infNFe ); // Monta EnviNfe TEnviNFe enviNFe = new TEnviNFe (); enviNFe . setVersao ( ConstantesUtil . VERSAO . NFE ); enviNFe . setIdLote ( \"1\" ); enviNFe . setIndSinc ( \"1\" ); enviNFe . getNFe (). add ( nfe ); // Monta e Assina o XML enviNFe = Nfe . montaNfe ( config , enviNFe , true ); // Envia a Nfe para a Sefaz TRetEnviNFe retorno = Nfe . enviarNfe ( config , enviNFe , DocumentoEnum . NFE ); //Valida se o Retorno \u00e9 Assincrono if ( RetornoUtil . isRetornoAssincrono ( retorno )) { //Pega o Recibo String recibo = retorno . getInfRec (). getNRec (); int tentativa = 0 ; TRetConsReciNFe retornoNfe = null ; //Define Numero de tentativas que ir\u00e1 tentar a Consulta while ( tentativa < 15 ) { retornoNfe = Nfe . consultaRecibo ( config , recibo , DocumentoEnum . NFE ); if ( retornoNfe . getCStat (). equals ( StatusEnum . LOTE_EM_PROCESSAMENTO . getCodigo ())) { System . out . println ( \"INFO: Lote Em Processamento, vai tentar novamente apos 1 Segundo.\" ); Thread . sleep ( 1000 ); tentativa ++ ; } else { break ; } } RetornoUtil . validaAssincrono ( retornoNfe ); System . out . println (); System . out . println ( \"# Status: \" + retornoNfe . getProtNFe (). get ( 0 ). getInfProt (). getCStat () + \" - \" + retornoNfe . getProtNFe (). get ( 0 ). getInfProt (). getXMotivo ()); System . out . println ( \"# Protocolo: \" + retornoNfe . getProtNFe (). get ( 0 ). getInfProt (). getNProt ()); System . out . println ( \"# XML Final: \" + XmlNfeUtil . criaNfeProc ( enviNFe , retornoNfe . getProtNFe (). get ( 0 ))); } else { //Se for else o Retorno \u00e9 Sincrono //Valida Retorno Sincrono RetornoUtil . validaSincrono ( retorno ); System . out . println (); System . out . println ( \"# Status: \" + retorno . getProtNFe (). getInfProt (). getCStat () + \" - \" + retorno . getProtNFe (). getInfProt (). getXMotivo ()); System . out . println ( \"# Protocolo: \" + retorno . getProtNFe (). getInfProt (). getNProt ()); System . out . println ( \"# Xml Final :\" + XmlNfeUtil . criaNfeProc ( enviNFe , retorno . getProtNFe ())); } } catch ( Exception e ) { System . err . println (); System . err . println ( \"# Erro: \" + e . getMessage ()); } } /** * Preenche o IDE * @param config * @param cnf * @param numeroNfe * @param tipoEmissao * @param cDv * @param dataEmissao * @return * @throws NfeException */ private static Ide preencheIde ( ConfiguracoesNfe config , String cnf , int numeroNfe , String tipoEmissao , String modelo , int serie , String cDv , LocalDateTime dataEmissao ) throws NfeException { Ide ide = new Ide (); ide . setCUF ( config . getEstado (). getCodigoIbge ()); ide . setCNF ( cnf ); ide . setNatOp ( \"NOTA FISCAL CONSUMIDOR ELETRONICA\" ); ide . setMod ( modelo ); ide . setSerie ( String . valueOf ( serie )); ide . setNNF ( String . valueOf ( numeroNfe )); ide . setDhEmi ( XmlNfeUtil . dataNfe ( dataEmissao )); ide . setTpNF ( \"1\" ); ide . setIdDest ( \"1\" ); ide . setCMunFG ( \"5219753\" ); ide . setTpImp ( \"1\" ); ide . setTpEmis ( tipoEmissao ); ide . setCDV ( cDv ); ide . setTpAmb ( config . getAmbiente (). getCodigo ()); ide . setFinNFe ( \"1\" ); ide . setIndFinal ( \"1\" ); ide . setIndPres ( \"1\" ); ide . setProcEmi ( \"0\" ); ide . setVerProc ( \"1.0\" ); return ide ; } /** * Preenche o Emitente da Nfe * @param config * @param cnpj * @return */ private static Emit preencheEmitente ( ConfiguracoesNfe config , String cnpj ) { Emit emit = new Emit (); emit . setCNPJ ( cnpj ); emit . setXNome ( \"XXXX\" ); TEnderEmi enderEmit = new TEnderEmi (); enderEmit . setXLgr ( \"AV SANTO ANTONIO & cia\" ); enderEmit . setNro ( \"0\" ); enderEmit . setXCpl ( \"QD 17 LT 01-02-03\" ); enderEmit . setXBairro ( \"PQ STO ANTONIO\" ); enderEmit . setCMun ( \"5219753\" ); enderEmit . setXMun ( \"SANTO ANTONIO DO DESCOBERTO\" ); enderEmit . setUF ( TUfEmi . valueOf ( config . getEstado (). toString ())); enderEmit . setCEP ( \"72900000\" ); enderEmit . setCPais ( \"1058\" ); enderEmit . setXPais ( \"Brasil\" ); enderEmit . setFone ( \"6233215175\" ); emit . setEnderEmit ( enderEmit ); emit . setIE ( \"XXX\" ); emit . setCRT ( \"3\" ); return emit ; } /** * Preenche o Destinatario da NFe * @return */ private static Dest preencheDestinatario () { Dest dest = new Dest (); dest . setCNPJ ( \"XXX\" ); dest . setXNome ( \"NF-E EMITIDA EM AMBIENTE DE HOMOLOGACAO - SEM VALOR FISCAL\" ); TEndereco enderDest = new TEndereco (); enderDest . setXLgr ( \"Rua: Teste\" ); enderDest . setNro ( \"0\" ); enderDest . setXBairro ( \"TESTE\" ); enderDest . setCMun ( \"4109708\" ); enderDest . setXMun ( \"IBAITI\" ); enderDest . setUF ( TUf . valueOf ( \"PR\" )); enderDest . setCEP ( \"84900000\" ); enderDest . setCPais ( \"1058\" ); enderDest . setXPais ( \"Brasil\" ); enderDest . setFone ( \"4845454545\" ); dest . setEnderDest ( enderDest ); dest . setEmail ( \"teste@test\" ); dest . setIndIEDest ( \"9\" ); return dest ; } /** * Preenche Det Nfe */ private static List < Det > preencheDet () { //O Preenchimento deve ser feito por produto, Ent\u00e3o deve ocorrer uma LIsta Det det = new Det (); //O numero do Item deve seguir uma sequencia det . setNItem ( \"1\" ); // Preenche dados do Produto det . setProd ( preencheProduto ()); //Preenche dados do Imposto det . setImposto ( preencheImposto ()); //Retorna a Lista de Det return Collections . singletonList ( det ); } /** * Preenche dados do Produto * @return */ private static Prod preencheProduto () { Prod prod = new Prod (); prod . setCProd ( \"7898480650104\" ); prod . setCEAN ( \"7898480650104\" ); prod . setXProd ( \"NOTA FISCAL EMITIDA EM AMBIENTE DE HOMOLOGACAO - SEM VALOR FISCAL\" ); prod . setNCM ( \"27101932\" ); prod . setCEST ( \"0600500\" ); prod . setIndEscala ( \"S\" ); prod . setCFOP ( \"5405\" ); prod . setUCom ( \"UN\" ); prod . setQCom ( \"1.0000\" ); prod . setVUnCom ( \"13.0000\" ); prod . setVProd ( \"13.00\" ); prod . setCEANTrib ( \"7898480650104\" ); prod . setUTrib ( \"UN\" ); prod . setQTrib ( \"1.0000\" ); prod . setVUnTrib ( \"13.0000\" ); prod . setIndTot ( \"1\" ); return prod ; } /** * Preenche dados do Imposto da Nfe * @return */ private static Imposto preencheImposto () { Imposto imposto = new Imposto (); ICMS icms = new ICMS (); ICMS . ICMS00 icms00 = new ICMS . ICMS00 (); icms00 . setOrig ( \"0\" ); icms00 . setCST ( \"00\" ); icms00 . setModBC ( \"0\" ); icms00 . setVBC ( \"13.00\" ); icms00 . setPICMS ( \"7.00\" ); icms00 . setVICMS ( \"0.91\" ); icms . setICMS00 ( icms00 ); PIS pis = new PIS (); PISAliq pisAliq = new PISAliq (); pisAliq . setCST ( \"01\" ); pisAliq . setVBC ( \"13.00\" ); pisAliq . setPPIS ( \"1.65\" ); pisAliq . setVPIS ( \"0.21\" ); pis . setPISAliq ( pisAliq ); COFINS cofins = new COFINS (); COFINSAliq cofinsAliq = new COFINSAliq (); cofinsAliq . setCST ( \"01\" ); cofinsAliq . setVBC ( \"13.00\" ); cofinsAliq . setPCOFINS ( \"7.60\" ); cofinsAliq . setVCOFINS ( \"0.99\" ); cofins . setCOFINSAliq ( cofinsAliq ); imposto . getContent (). add ( new ObjectFactory (). createTNFeInfNFeDetImpostoICMS ( icms )); imposto . getContent (). add ( new ObjectFactory (). createTNFeInfNFeDetImpostoPIS ( pis )); imposto . getContent (). add ( new ObjectFactory (). createTNFeInfNFeDetImpostoCOFINS ( cofins )); return imposto ; } /** * Prenche Total NFe * @return */ private static Total preencheTotal () { Total total = new Total (); ICMSTot icmstot = new ICMSTot (); icmstot . setVBC ( \"13.00\" ); icmstot . setVICMS ( \"0.91\" ); icmstot . setVICMSDeson ( \"0.00\" ); icmstot . setVFCP ( \"0.00\" ); icmstot . setVFCPST ( \"0.00\" ); icmstot . setVFCPSTRet ( \"0.00\" ); icmstot . setVBCST ( \"0.00\" ); icmstot . setVST ( \"0.00\" ); icmstot . setVProd ( \"13.00\" ); icmstot . setVFrete ( \"0.00\" ); icmstot . setVSeg ( \"0.00\" ); icmstot . setVDesc ( \"0.00\" ); icmstot . setVII ( \"0.00\" ); icmstot . setVIPI ( \"0.00\" ); icmstot . setVIPIDevol ( \"0.00\" ); icmstot . setVPIS ( \"0.21\" ); icmstot . setVCOFINS ( \"0.99\" ); icmstot . setVOutro ( \"0.00\" ); icmstot . setVNF ( \"13.00\" ); total . setICMSTot ( icmstot ); return total ; } /** * Preenche Transporte * @return */ private static Transp preencheTransporte (){ Transp transp = new Transp (); transp . setModFrete ( \"9\" ); return transp ; } /** * Preenche dados Pagamento * @return */ private static Pag preenchePag () { Pag pag = new Pag (); Pag . DetPag detPag = new Pag . DetPag (); detPag . setTPag ( \"01\" ); detPag . setVPag ( \"13.00\" ); pag . getDetPag (). add ( detPag ); return pag ; } } Acesse o menu Configura\u00e7\u00f5es (Certificado)","title":"Envio NF-e (S\u00edncrono)"},{"location":"tutorial/envio/#envio-nfc-e-sincrono","text":"EnvioNfeXmlTeste.java import br.com.swconsultoria.nfe.Nfe ; import br.com.swconsultoria.nfe.dom.ConfiguracoesNfe ; import br.com.swconsultoria.nfe.dom.enuns.* ; import br.com.swconsultoria.nfe.exception.NfeException ; import br.com.swconsultoria.nfe.schema_4.enviNFe.* ; import br.com.swconsultoria.nfe.schema_4.enviNFe.TNFe.InfNFe ; import br.com.swconsultoria.nfe.schema_4.enviNFe.TNFe.InfNFe.* ; import br.com.swconsultoria.nfe.schema_4.enviNFe.TNFe.InfNFe.Det.Imposto ; import br.com.swconsultoria.nfe.schema_4.enviNFe.TNFe.InfNFe.Det.Imposto.COFINS ; import br.com.swconsultoria.nfe.schema_4.enviNFe.TNFe.InfNFe.Det.Imposto.COFINS.COFINSAliq ; import br.com.swconsultoria.nfe.schema_4.enviNFe.TNFe.InfNFe.Det.Imposto.ICMS ; import br.com.swconsultoria.nfe.schema_4.enviNFe.TNFe.InfNFe.Det.Imposto.PIS ; import br.com.swconsultoria.nfe.schema_4.enviNFe.TNFe.InfNFe.Det.Imposto.PIS.PISAliq ; import br.com.swconsultoria.nfe.schema_4.enviNFe.TNFe.InfNFe.Det.Prod ; import br.com.swconsultoria.nfe.schema_4.enviNFe.TNFe.InfNFe.Total.ICMSTot ; import br.com.swconsultoria.nfe.schema_4.retConsReciNFe.TRetConsReciNFe ; import br.com.swconsultoria.nfe.util.* ; import javax.xml.bind.JAXBElement ; import javax.xml.namespace.QName ; import java.security.NoSuchAlgorithmException ; import java.time.LocalDateTime ; import java.util.Collections ; import java.util.List ; /** * @author Samuel Oliveira * */ public class EnvioNfceTeste { public static void main ( String [] args ) { try { // Inicia As Configura\u00e7\u00f5es (1) ConfiguracoesNfe config = Config . iniciaConfiguracoes (); //Informe o Numero da NFCe int numeroNFCe = XXX ; //Informe o CNPJ do Emitente da NFCe String cnpj = \"XXX\" ; //Informe a data de Emissao da NFCe LocalDateTime dataEmissao = LocalDateTime . now (); //Informe o cnf da NFCe com 8 digitos String cnf = ChaveUtil . completarComZerosAEsquerda ( String . valueOf ( numeroNFCe ), 8 ); //Informe o modelo da NFCe String modelo = DocumentoEnum . NFCE . getModelo (); //Informe a Serie da NFCe int serie = 1 ; //Informe o tipo de Emissao da NFCe String tipoEmissao = \"1\" ; //Informe o idToken String idToken = \"XXX\" ; //Informe o CSC da NFCe String csc = \"XXX\" ; // MontaChave a NFCe ChaveUtil chaveUtil = new ChaveUtil ( config . getEstado (), cnpj , modelo , serie , numeroNFCe , tipoEmissao , cnf , dataEmissao ); String chave = chaveUtil . getChaveNF (); String cdv = chaveUtil . getDigitoVerificador (); InfNFe infNFe = new InfNFe (); infNFe . setId ( chave ); infNFe . setVersao ( ConstantesUtil . VERSAO . NFE ); //Preenche IDE infNFe . setIde ( preencheIde ( config , cnf , numeroNFCe , tipoEmissao , modelo , serie , cdv , dataEmissao )); //Preenche Emitente infNFe . setEmit ( preencheEmitente ( config , cnpj )); //Preenche o Destinatario infNFe . setDest ( preencheDestinatario ()); //Preenche os dados do Produto da NFCe e adiciona a Lista infNFe . getDet (). addAll ( preencheDet ()); //Preenche totais da NFCe infNFe . setTotal ( preencheTotal ()); //Preenche os dados de Transporte infNFe . setTransp ( preencheTransporte ()); // Preenche dados Pagamento infNFe . setPag ( preenchePag ()); TNFe nfe = new TNFe (); nfe . setInfNFe ( infNFe ); // Monta EnviNfe TEnviNFe enviNFe = new TEnviNFe (); enviNFe . setVersao ( ConstantesUtil . VERSAO . NFE ); enviNFe . setIdLote ( \"1\" ); enviNFe . setIndSinc ( \"1\" ); enviNFe . getNFe (). add ( nfe ); // Monta e Assina o XML enviNFe = Nfe . montaNfe ( config , enviNFe , true ); //Monta QRCode String qrCode = preencheQRCode ( enviNFe , config , idToken , csc ); TNFe . InfNFeSupl infNFeSupl = new TNFe . InfNFeSupl (); infNFeSupl . setQrCode ( qrCode ); infNFeSupl . setUrlChave ( WebServiceUtil . getUrl ( config , DocumentoEnum . NFCE , ServicosEnum . URL_CONSULTANFCE )); enviNFe . getNFe (). get ( 0 ). setInfNFeSupl ( infNFeSupl ); // Envia a Nfe para a Sefaz TRetEnviNFe retorno = Nfe . enviarNfe ( config , enviNFe , DocumentoEnum . NFCE ); //Valida se o Retorno \u00e9 Assincrono if ( RetornoUtil . isRetornoAssincrono ( retorno )) { //Pega o Recibo String recibo = retorno . getInfRec (). getNRec (); int tentativa = 0 ; TRetConsReciNFe retornoNfe = null ; //Define Numero de tentativas que ir\u00e1 tentar a Consulta while ( tentativa < 15 ) { retornoNfe = Nfe . consultaRecibo ( config , recibo , DocumentoEnum . NFE ); if ( retornoNfe . getCStat (). equals ( StatusEnum . LOTE_EM_PROCESSAMENTO . getCodigo ())) { System . out . println ( \"INFO: Lote Em Processamento, vai tentar novamente apos 1 Segundo.\" ); Thread . sleep ( 1000 ); tentativa ++ ; } else { break ; } } RetornoUtil . validaAssincrono ( retornoNfe ); System . out . println (); System . out . println ( \"# Status: \" + retornoNfe . getProtNFe (). get ( 0 ). getInfProt (). getCStat () + \" - \" + retornoNfe . getProtNFe (). get ( 0 ). getInfProt (). getXMotivo ()); System . out . println ( \"# Protocolo: \" + retornoNfe . getProtNFe (). get ( 0 ). getInfProt (). getNProt ()); System . out . println ( \"# XML Final: \" + XmlNfeUtil . criaNfeProc ( enviNFe , retornoNfe . getProtNFe (). get ( 0 ))); } else { //Se for else o Retorno \u00e9 Sincrono //Valida Retorno Sincrono RetornoUtil . validaSincrono ( retorno ); System . out . println (); System . out . println ( \"# Status: \" + retorno . getProtNFe (). getInfProt (). getCStat () + \" - \" + retorno . getProtNFe (). getInfProt (). getXMotivo ()); System . out . println ( \"# Protocolo: \" + retorno . getProtNFe (). getInfProt (). getNProt ()); System . out . println ( \"# Xml Final :\" + XmlNfeUtil . criaNfeProc ( enviNFe , retorno . getProtNFe ())); } } catch ( Exception e ) { System . err . println (); System . err . println ( \"# Erro: \" + e . getMessage ()); } } /** * Preenche o IDE * @param config * @param cnf * @param numeroNFCe * @param tipoEmissao * @param cDv * @param dataEmissao * @return * @throws NfeException */ private static Ide preencheIde ( ConfiguracoesNfe config , String cnf , int numeroNFCe , String tipoEmissao , String modelo , int serie , String cDv , LocalDateTime dataEmissao ) throws NfeException { Ide ide = new Ide (); ide . setCUF ( config . getEstado (). getCodigoIbge ()); ide . setCNF ( cnf ); ide . setNatOp ( \"NOTA FISCAL CONSUMIDOR ELETRONICA\" ); ide . setMod ( modelo ); ide . setSerie ( String . valueOf ( serie )); ide . setNNF ( String . valueOf ( numeroNFCe )); ide . setDhEmi ( XmlNfeUtil . dataNfe ( dataEmissao )); ide . setTpNF ( \"1\" ); ide . setIdDest ( \"1\" ); ide . setCMunFG ( \"5219753\" ); ide . setTpImp ( \"4\" ); ide . setTpEmis ( tipoEmissao ); ide . setCDV ( cDv ); ide . setTpAmb ( config . getAmbiente (). getCodigo ()); ide . setFinNFe ( \"1\" ); ide . setIndFinal ( \"1\" ); ide . setIndPres ( \"1\" ); ide . setProcEmi ( \"0\" ); ide . setVerProc ( \"1.0\" ); return ide ; } /** * Preenche o Emitente da NFCe * @param config * @param cnpj * @return */ private static Emit preencheEmitente ( ConfiguracoesNfe config , String cnpj ) { Emit emit = new Emit (); emit . setCNPJ ( cnpj ); emit . setXNome ( \"XXX\" ); TEnderEmi enderEmit = new TEnderEmi (); enderEmit . setXLgr ( \"AV SANTO ANTONIO e cia\" ); enderEmit . setNro ( \"0\" ); enderEmit . setXCpl ( \"QD 17 LT 01-02-03\" ); enderEmit . setXBairro ( \"PQ STO ANTONIO\" ); enderEmit . setCMun ( \"5219753\" ); enderEmit . setXMun ( \"SANTO ANTONIO DO DESCOBERTO\" ); enderEmit . setUF ( TUfEmi . valueOf ( config . getEstado (). toString ())); enderEmit . setCEP ( \"72900000\" ); enderEmit . setCPais ( \"1058\" ); enderEmit . setXPais ( \"Brasil\" ); enderEmit . setFone ( \"6233215175\" ); emit . setEnderEmit ( enderEmit ); emit . setIE ( \"XXX\" ); emit . setCRT ( \"3\" ); return emit ; } /** * Preenche o Destinatario da NFCe * @return */ private static Dest preencheDestinatario () { Dest dest = new Dest (); dest . setCNPJ ( \"XXX\" ); dest . setXNome ( \"NF-E EMITIDA EM AMBIENTE DE HOMOLOGACAO - SEM VALOR FISCAL\" ); TEndereco enderDest = new TEndereco (); enderDest . setXLgr ( \"Rua: Teste\" ); enderDest . setNro ( \"0\" ); enderDest . setXBairro ( \"TESTE\" ); enderDest . setCMun ( \"4109708\" ); enderDest . setXMun ( \"IBAITI\" ); enderDest . setUF ( TUf . valueOf ( \"PR\" )); enderDest . setCEP ( \"84900000\" ); enderDest . setCPais ( \"1058\" ); enderDest . setXPais ( \"Brasil\" ); enderDest . setFone ( \"4845454545\" ); dest . setEnderDest ( enderDest ); dest . setEmail ( \"teste@test\" ); dest . setIndIEDest ( \"9\" ); return dest ; } /** * Preenche Det NFCe */ private static List < Det > preencheDet () { //O Preenchimento deve ser feito por produto, Ent\u00e3o deve ocorrer uma LIsta Det det = new Det (); //O numero do Item deve seguir uma sequencia det . setNItem ( \"1\" ); // Preenche dados do Produto det . setProd ( preencheProduto ()); //Preenche dados do Imposto det . setImposto ( preencheImposto ()); //Retorna a Lista de Det return Collections . singletonList ( det ); } /** * Preenche dados do Produto * @return */ private static Prod preencheProduto () { Prod prod = new Prod (); prod . setCProd ( \"7898480650104\" ); prod . setCEAN ( \"7898480650104\" ); prod . setXProd ( \"NOTA FISCAL EMITIDA EM AMBIENTE DE HOMOLOGACAO - SEM VALOR FISCAL\" ); prod . setNCM ( \"27101932\" ); prod . setCEST ( \"0600500\" ); prod . setIndEscala ( \"S\" ); prod . setCFOP ( \"5102\" ); prod . setUCom ( \"UN\" ); prod . setQCom ( \"1.0000\" ); prod . setVUnCom ( \"13.0000\" ); prod . setVProd ( \"13.00\" ); prod . setCEANTrib ( \"7898480650104\" ); prod . setUTrib ( \"UN\" ); prod . setQTrib ( \"1.0000\" ); prod . setVUnTrib ( \"13.0000\" ); prod . setIndTot ( \"1\" ); return prod ; } /** * Preenche dados do Imposto da NFCe * @return */ private static Imposto preencheImposto () { Imposto imposto = new Imposto (); ICMS icms = new ICMS (); ICMS . ICMS00 icms00 = new ICMS . ICMS00 (); icms00 . setOrig ( \"0\" ); icms00 . setCST ( \"00\" ); icms00 . setModBC ( \"0\" ); icms00 . setVBC ( \"13.00\" ); icms00 . setPICMS ( \"7.00\" ); icms00 . setVICMS ( \"0.91\" ); icms . setICMS00 ( icms00 ); PIS pis = new PIS (); PISAliq pisAliq = new PISAliq (); pisAliq . setCST ( \"01\" ); pisAliq . setVBC ( \"13.00\" ); pisAliq . setPPIS ( \"1.65\" ); pisAliq . setVPIS ( \"0.21\" ); pis . setPISAliq ( pisAliq ); COFINS cofins = new COFINS (); COFINSAliq cofinsAliq = new COFINSAliq (); cofinsAliq . setCST ( \"01\" ); cofinsAliq . setVBC ( \"13.00\" ); cofinsAliq . setPCOFINS ( \"7.60\" ); cofinsAliq . setVCOFINS ( \"0.99\" ); cofins . setCOFINSAliq ( cofinsAliq ); JAXBElement < ICMS > icmsElement = new JAXBElement < ICMS > ( new QName ( \"ICMS\" ), ICMS . class , icms ); imposto . getContent (). add ( icmsElement ); JAXBElement < PIS > pisElement = new JAXBElement < PIS > ( new QName ( \"PIS\" ), PIS . class , pis ); imposto . getContent (). add ( pisElement ); JAXBElement < COFINS > cofinsElement = new JAXBElement < COFINS > ( new QName ( \"COFINS\" ), COFINS . class , cofins ); imposto . getContent (). add ( cofinsElement ); return imposto ; } /** * Prenche Total NFCe * @return */ private static Total preencheTotal () { Total total = new Total (); ICMSTot icmstot = new ICMSTot (); icmstot . setVBC ( \"13.00\" ); icmstot . setVICMS ( \"0.91\" ); icmstot . setVICMSDeson ( \"0.00\" ); icmstot . setVFCP ( \"0.00\" ); icmstot . setVFCPST ( \"0.00\" ); icmstot . setVFCPSTRet ( \"0.00\" ); icmstot . setVBCST ( \"0.00\" ); icmstot . setVST ( \"0.00\" ); icmstot . setVProd ( \"13.00\" ); icmstot . setVFrete ( \"0.00\" ); icmstot . setVSeg ( \"0.00\" ); icmstot . setVDesc ( \"0.00\" ); icmstot . setVII ( \"0.00\" ); icmstot . setVIPI ( \"0.00\" ); icmstot . setVIPIDevol ( \"0.00\" ); icmstot . setVPIS ( \"0.21\" ); icmstot . setVCOFINS ( \"0.99\" ); icmstot . setVOutro ( \"0.00\" ); icmstot . setVNF ( \"13.00\" ); total . setICMSTot ( icmstot ); return total ; } /** * Preenche Transporte * @return */ private static Transp preencheTransporte () { Transp transp = new Transp (); transp . setModFrete ( \"9\" ); return transp ; } /** * Preenche dados Pagamento * @return */ private static Pag preenchePag () { Pag pag = new Pag (); Pag . DetPag detPag = new Pag . DetPag (); detPag . setTPag ( \"01\" ); detPag . setVPag ( \"13.00\" ); pag . getDetPag (). add ( detPag ); return pag ; } /** * Preenche QRCode * @param enviNFe * @param config * @param idToken * @param csc * @return * @throws NfeException * @throws NoSuchAlgorithmException */ private static String preencheQRCode ( TEnviNFe enviNFe , ConfiguracoesNfe config , String idToken , String csc ) throws NfeException , NoSuchAlgorithmException { //QRCODE EMISAO ONLINE return NFCeUtil . getCodeQRCode ( enviNFe . getNFe (). get ( 0 ). getInfNFe (). getId (). substring ( 3 ), config . getAmbiente (). getCodigo (), idToken , csc , WebServiceUtil . getUrl ( config , DocumentoEnum . NFCE , ServicosEnum . URL_QRCODE )); //QRCODE EMISSAO OFFLINE // return NFCeUtil.getCodeQRCodeContingencia( // enviNFe.getNFe().get(0).getInfNFe().getId().substring(3), // config.getAmbiente().getCodigo(), // enviNFe.getNFe().get(0).getInfNFe().getIde().getDhEmi(), // enviNFe.getNFe().get(0).getInfNFe().getTotal().getICMSTot().getVNF(), // Base64.getEncoder().encodeToString(enviNFe.getNFe().get(0).getSignature().getSignedInfo().getReference().getDigestValue()), // idToken, // csc, // WebServiceUtil.getUrl(config, DocumentoEnum.NFCE, ServicosEnum.URL_QRCODE)); } } Acesse o menu Configura\u00e7\u00f5es (Certificado)","title":"Envio NFC-e (S\u00edncrono)"},{"location":"tutorial/envio/#envio-nf-e-com-arquivo-xml","text":"EnvioNfeXmlTeste.java import br.com.swconsultoria.nfe.Nfe ; import br.com.swconsultoria.nfe.dom.ConfiguracoesNfe ; import br.com.swconsultoria.nfe.dom.enuns.DocumentoEnum ; import br.com.swconsultoria.nfe.dom.enuns.StatusEnum ; import br.com.swconsultoria.nfe.schema_4.enviNFe.TEnviNFe ; import br.com.swconsultoria.nfe.schema_4.enviNFe.TRetEnviNFe ; import br.com.swconsultoria.nfe.schema_4.retConsReciNFe.TRetConsReciNFe ; import br.com.swconsultoria.nfe.util.RetornoUtil ; import br.com.swconsultoria.nfe.util.XmlNfeUtil ; /** * @author Samuel Oliveira * */ public class EnvioNfeXmlTeste { public static void main ( String [] args ) { try { // Inicia As Configura\u00e7\u00f5es (1) ConfiguracoesNfe config = Config . iniciaConfiguracoes (); String caminhoXML = \"d:/teste/nfe.xml\" ; // Le Xml do Arquivo String xml = XmlNfeUtil . leXml ( caminhoXML ); TEnviNFe enviNFe = XmlNfeUtil . xmlToObject ( xml , TEnviNFe . class ); // Monta e Assina o XML enviNFe = Nfe . montaNfe ( config , enviNFe , true ); // Envia a Nfe para a Sefaz TRetEnviNFe retorno = Nfe . enviarNfe ( config , enviNFe , DocumentoEnum . NFE ); //Valida se o Retorno \u00e9 Assincrono if ( RetornoUtil . isRetornoAssincrono ( retorno )) { //Pega o Recibo String recibo = retorno . getInfRec (). getNRec (); int tentativa = 0 ; TRetConsReciNFe retornoNfe = null ; //Define Numero de tentativas que ir\u00e1 tentar a Consulta while ( tentativa < 15 ) { retornoNfe = Nfe . consultaRecibo ( config , recibo , DocumentoEnum . NFE ); if ( retornoNfe . getCStat (). equals ( StatusEnum . LOTE_EM_PROCESSAMENTO . getCodigo ())) { System . out . println ( \"INFO: Lote Em Processamento, vai tentar novamente apos 1 Segundo.\" ); Thread . sleep ( 1000 ); tentativa ++ ; } else { break ; } } RetornoUtil . validaAssincrono ( retornoNfe ); System . out . println (); System . out . println ( \"# Status: \" + retornoNfe . getProtNFe (). get ( 0 ). getInfProt (). getCStat () + \" - \" + retornoNfe . getProtNFe (). get ( 0 ). getInfProt (). getXMotivo ()); System . out . println ( \"# Protocolo: \" + retornoNfe . getProtNFe (). get ( 0 ). getInfProt (). getNProt ()); System . out . println ( \"# XML Final: \" + XmlNfeUtil . criaNfeProc ( enviNFe , retornoNfe . getProtNFe (). get ( 0 ))); } else { //Se for else o Retorno \u00e9 Sincrono //Valida Retorno Sincrono RetornoUtil . validaSincrono ( retorno ); System . out . println (); System . out . println ( \"# Status: \" + retorno . getProtNFe (). getInfProt (). getCStat () + \" - \" + retorno . getProtNFe (). getInfProt (). getXMotivo ()); System . out . println ( \"# Protocolo: \" + retorno . getProtNFe (). getInfProt (). getNProt ()); System . out . println ( \"# Xml Final : \" + XmlNfeUtil . criaNfeProc ( enviNFe , retorno . getProtNFe ())); } } catch ( Exception e ) { System . err . println (); System . err . println ( \"# Erro: \" + e . getMessage ()); } } } Acesse o menu Configura\u00e7\u00f5es (Certificado)","title":"Envio NF-e com arquivo XML"},{"location":"tutorial/inutilizacao/","text":"Inutiliza\u00e7\u00e3o Fun\u00e7\u00e3o para Inutilizar faixa de n\u00fameros da NF-e. Enviar evento de Inutiliza\u00e7\u00e3o InutilizarTeste.java import br.com.swconsultoria.nfe.Nfe ; import br.com.swconsultoria.nfe.dom.ConfiguracoesNfe ; import br.com.swconsultoria.nfe.dom.enuns.AmbienteEnum ; import br.com.swconsultoria.nfe.dom.enuns.DocumentoEnum ; import br.com.swconsultoria.nfe.dom.enuns.EstadosEnum ; import br.com.swconsultoria.nfe.schema_4.inutNFe.TInutNFe ; import br.com.swconsultoria.nfe.schema_4.inutNFe.TRetInutNFe ; import br.com.swconsultoria.nfe.util.InutilizacaoUtil ; import br.com.swconsultoria.nfe.util.RetornoUtil ; import java.time.LocalDateTime ; /** * @author Samuel Oliveira * */ public class InutilizarTeste { public static void main ( String [] args ) { try { /// Inicia As Configura\u00e7\u00f5es (1) ConfiguracoesNfe config = ConfiguracaoTeste . iniciaConfiguracoes ( EstadosEnum . GO , AmbienteEnum . HOMOLOGACAO ); //Informe o CNPJ do emitente String cnpj = \"XXX\" ; //Informe a serie int serie = 1 ; //Informe a numeracao Inicial int numeroInicial = XXX ; //Informe a numeracao Final int numeroFinal = XXX ; //Informe a Justificativa da Inutilizacao String justificativa = \"Teste de Inutiliza\u00e7\u00e3o\" ; //Informe a data do Cancelamento LocalDateTime dataCancelamento = LocalDateTime . now (); //MOnta Inutiliza\u00e7\u00e3o TInutNFe inutNFe = InutilizacaoUtil . montaInutilizacao ( DocumentoEnum . NFE , cnpj , serie , numeroInicial , numeroFinal , justificativa , dataCancelamento , config ); //Envia Inutiliza\u00e7\u00e3o TRetInutNFe retorno = Nfe . inutilizacao ( config , inutNFe , DocumentoEnum . NFE , true ); //Valida o Retorno da Inutiliza\u00e7\u00e3o RetornoUtil . validaInutilizacao ( retorno ); //Resultado System . out . println (); System . out . println ( \"# Status: \" + retorno . getInfInut (). getCStat () + \" - \" + retorno . getInfInut (). getXMotivo ()); System . out . println ( \"# Protocolo: \" + retorno . getInfInut (). getNProt ()); //Cria ProcEvento da Inutiliza\u00e7\u00e3o String proc = InutilizacaoUtil . criaProcInutilizacao ( config , inutNFe , retorno ); System . out . println (); System . out . println ( \"# ProcInutilizacao : \" + proc ); } catch ( Exception e ) { System . err . println ( e . getMessage ()); } } } Acesse o menu Configura\u00e7\u00f5es (Certificado)","title":"Inutiliza\u00e7\u00e3o"},{"location":"tutorial/inutilizacao/#inutilizacao","text":"Fun\u00e7\u00e3o para Inutilizar faixa de n\u00fameros da NF-e.","title":"Inutiliza\u00e7\u00e3o"},{"location":"tutorial/inutilizacao/#enviar-evento-de-inutilizacao","text":"InutilizarTeste.java import br.com.swconsultoria.nfe.Nfe ; import br.com.swconsultoria.nfe.dom.ConfiguracoesNfe ; import br.com.swconsultoria.nfe.dom.enuns.AmbienteEnum ; import br.com.swconsultoria.nfe.dom.enuns.DocumentoEnum ; import br.com.swconsultoria.nfe.dom.enuns.EstadosEnum ; import br.com.swconsultoria.nfe.schema_4.inutNFe.TInutNFe ; import br.com.swconsultoria.nfe.schema_4.inutNFe.TRetInutNFe ; import br.com.swconsultoria.nfe.util.InutilizacaoUtil ; import br.com.swconsultoria.nfe.util.RetornoUtil ; import java.time.LocalDateTime ; /** * @author Samuel Oliveira * */ public class InutilizarTeste { public static void main ( String [] args ) { try { /// Inicia As Configura\u00e7\u00f5es (1) ConfiguracoesNfe config = ConfiguracaoTeste . iniciaConfiguracoes ( EstadosEnum . GO , AmbienteEnum . HOMOLOGACAO ); //Informe o CNPJ do emitente String cnpj = \"XXX\" ; //Informe a serie int serie = 1 ; //Informe a numeracao Inicial int numeroInicial = XXX ; //Informe a numeracao Final int numeroFinal = XXX ; //Informe a Justificativa da Inutilizacao String justificativa = \"Teste de Inutiliza\u00e7\u00e3o\" ; //Informe a data do Cancelamento LocalDateTime dataCancelamento = LocalDateTime . now (); //MOnta Inutiliza\u00e7\u00e3o TInutNFe inutNFe = InutilizacaoUtil . montaInutilizacao ( DocumentoEnum . NFE , cnpj , serie , numeroInicial , numeroFinal , justificativa , dataCancelamento , config ); //Envia Inutiliza\u00e7\u00e3o TRetInutNFe retorno = Nfe . inutilizacao ( config , inutNFe , DocumentoEnum . NFE , true ); //Valida o Retorno da Inutiliza\u00e7\u00e3o RetornoUtil . validaInutilizacao ( retorno ); //Resultado System . out . println (); System . out . println ( \"# Status: \" + retorno . getInfInut (). getCStat () + \" - \" + retorno . getInfInut (). getXMotivo ()); System . out . println ( \"# Protocolo: \" + retorno . getInfInut (). getNProt ()); //Cria ProcEvento da Inutiliza\u00e7\u00e3o String proc = InutilizacaoUtil . criaProcInutilizacao ( config , inutNFe , retorno ); System . out . println (); System . out . println ( \"# ProcInutilizacao : \" + proc ); } catch ( Exception e ) { System . err . println ( e . getMessage ()); } } } Acesse o menu Configura\u00e7\u00f5es (Certificado)","title":"Enviar evento de Inutiliza\u00e7\u00e3o"},{"location":"tutorial/manifestacao/","text":"Manifesta\u00e7\u00e3o Fun\u00e7\u00e3o para Manifestar a NF-e Recebida na Sefaz. Enviar evento de Manifesta\u00e7\u00e3o ManifestacaoTeste.java import br.com.swconsultoria.nfe.Nfe ; import br.com.swconsultoria.nfe.dom.ConfiguracoesNfe ; import br.com.swconsultoria.nfe.dom.Evento ; import br.com.swconsultoria.nfe.dom.enuns.ManifestacaoEnum ; import br.com.swconsultoria.nfe.schema.envConfRecebto.TEnvEvento ; import br.com.swconsultoria.nfe.schema.envConfRecebto.TRetEnvEvento ; import br.com.swconsultoria.nfe.util.ManifestacaoUtil ; import br.com.swconsultoria.nfe.util.RetornoUtil ; import java.time.LocalDateTime ; /** * @author Samuel Oliveira */ public class ManifestacaoTeste { public static void main ( String [] args ) { try { // Inicia As Configura\u00e7\u00f5es (1) ConfiguracoesNfe config = Config . iniciaConfiguracoes (); //Agora o evento pode aceitar uma lista de Manifest\u00e7\u00f5es para envio em Lote. //Para isso Foi criado o Objeto Manifestada Evento manifesta = new Evento (); //Informe a chave da Nota a ser Manifestada manifesta . setChave ( \"ZZZ\" ); //Informe o CNPJ do emitente manifesta . setCnpj ( \"XXX\" ); //Caso o Tipo de manifesta\u00e7\u00e3o seja OPERA\u00c7\u00c2O N\u00e3o REALIZADA, Informe o Motivo do Manifestacao manifesta . setMotivo ( \"Teste Opera\u00e7\u00e3o N\u00e3o Realizada\" ); //Informe a data do Manifestacao manifesta . setDataEvento ( LocalDateTime . now ()); //Informe o Tipo da Manifesta\u00e7\u00e3o manifesta . setTipoManifestacao ( ManifestacaoEnum . CIENCIA_DA_OPERACAO ); //Monta o Evento de Manifesta\u00e7\u00e3o TEnvEvento enviEvento = ManifestacaoUtil . montaManifestacao ( manifesta , config ); //Envia o Evento de Manifesta\u00e7\u00e3o TRetEnvEvento retorno = Nfe . manifestacao ( config , enviEvento , true ); //Valida o Retorno do Cancelamento RetornoUtil . validaManifestacao ( retorno ); //Resultado System . out . println (); retorno . getRetEvento (). forEach ( resultado -> { System . out . println ( \"# Chave: \" + resultado . getInfEvento (). getChNFe ()); System . out . println ( \"# Status: \" + resultado . getInfEvento (). getCStat () + \" - \" + resultado . getInfEvento (). getXMotivo ()); System . out . println ( \"# Protocolo: \" + resultado . getInfEvento (). getNProt ()); }); //Cria ProcEvento de Manifestacao String proc = ManifestacaoUtil . criaProcEventoManifestacao ( config , enviEvento , retorno . getRetEvento (). get ( 0 )); System . out . println (); System . out . println ( \"# ProcEvento : \" + proc ); } catch ( Exception e ) { System . err . println (); System . err . println ( \"# Erro: \" + e . getMessage ()); } } } Acesse o menu Configura\u00e7\u00f5es (Certificado)","title":"Manifesta\u00e7\u00e3o"},{"location":"tutorial/manifestacao/#manifestacao","text":"Fun\u00e7\u00e3o para Manifestar a NF-e Recebida na Sefaz.","title":"Manifesta\u00e7\u00e3o"},{"location":"tutorial/manifestacao/#enviar-evento-de-manifestacao","text":"ManifestacaoTeste.java import br.com.swconsultoria.nfe.Nfe ; import br.com.swconsultoria.nfe.dom.ConfiguracoesNfe ; import br.com.swconsultoria.nfe.dom.Evento ; import br.com.swconsultoria.nfe.dom.enuns.ManifestacaoEnum ; import br.com.swconsultoria.nfe.schema.envConfRecebto.TEnvEvento ; import br.com.swconsultoria.nfe.schema.envConfRecebto.TRetEnvEvento ; import br.com.swconsultoria.nfe.util.ManifestacaoUtil ; import br.com.swconsultoria.nfe.util.RetornoUtil ; import java.time.LocalDateTime ; /** * @author Samuel Oliveira */ public class ManifestacaoTeste { public static void main ( String [] args ) { try { // Inicia As Configura\u00e7\u00f5es (1) ConfiguracoesNfe config = Config . iniciaConfiguracoes (); //Agora o evento pode aceitar uma lista de Manifest\u00e7\u00f5es para envio em Lote. //Para isso Foi criado o Objeto Manifestada Evento manifesta = new Evento (); //Informe a chave da Nota a ser Manifestada manifesta . setChave ( \"ZZZ\" ); //Informe o CNPJ do emitente manifesta . setCnpj ( \"XXX\" ); //Caso o Tipo de manifesta\u00e7\u00e3o seja OPERA\u00c7\u00c2O N\u00e3o REALIZADA, Informe o Motivo do Manifestacao manifesta . setMotivo ( \"Teste Opera\u00e7\u00e3o N\u00e3o Realizada\" ); //Informe a data do Manifestacao manifesta . setDataEvento ( LocalDateTime . now ()); //Informe o Tipo da Manifesta\u00e7\u00e3o manifesta . setTipoManifestacao ( ManifestacaoEnum . CIENCIA_DA_OPERACAO ); //Monta o Evento de Manifesta\u00e7\u00e3o TEnvEvento enviEvento = ManifestacaoUtil . montaManifestacao ( manifesta , config ); //Envia o Evento de Manifesta\u00e7\u00e3o TRetEnvEvento retorno = Nfe . manifestacao ( config , enviEvento , true ); //Valida o Retorno do Cancelamento RetornoUtil . validaManifestacao ( retorno ); //Resultado System . out . println (); retorno . getRetEvento (). forEach ( resultado -> { System . out . println ( \"# Chave: \" + resultado . getInfEvento (). getChNFe ()); System . out . println ( \"# Status: \" + resultado . getInfEvento (). getCStat () + \" - \" + resultado . getInfEvento (). getXMotivo ()); System . out . println ( \"# Protocolo: \" + resultado . getInfEvento (). getNProt ()); }); //Cria ProcEvento de Manifestacao String proc = ManifestacaoUtil . criaProcEventoManifestacao ( config , enviEvento , retorno . getRetEvento (). get ( 0 )); System . out . println (); System . out . println ( \"# ProcEvento : \" + proc ); } catch ( Exception e ) { System . err . println (); System . err . println ( \"# Erro: \" + e . getMessage ()); } } } Acesse o menu Configura\u00e7\u00f5es (Certificado)","title":"Enviar evento de Manifesta\u00e7\u00e3o"},{"location":"tutorial/status-servico/","text":"Status de Servi\u00e7o Fun\u00e7\u00e3o para consultar o Status de Servi\u00e7o Da Sefaz. StatusServicoTeste.java import br.com.swconsultoria.nfe.Nfe ; import br.com.swconsultoria.nfe.dom.ConfiguracoesNfe ; import br.com.swconsultoria.nfe.dom.enuns.DocumentoEnum ; import br.com.swconsultoria.nfe.schema_4.retConsStatServ.TRetConsStatServ ; /** * @author Samuel Oliveira */ public class StatusServicoTeste { public static void main ( String [] args ) { try { // Inicia As Configura\u00e7\u00f5es (1) ConfiguracoesNfe config = Config . iniciaConfiguracoes (); //Efetua Consulta TRetConsStatServ retorno = Nfe . statusServico ( config , DocumentoEnum . NFE ); //Resultado System . out . println (); System . out . println ( \"# Status: \" + retorno . getCStat () + \" - \" + retorno . getXMotivo ()); } catch ( Exception e ) { System . err . println ( \"# Erro: \" + e . getMessage ()); } } } Acesse o menu Configura\u00e7\u00f5es (Certificado)","title":"Status Servi\u00e7o Sefaz"},{"location":"tutorial/status-servico/#status-de-servico","text":"Fun\u00e7\u00e3o para consultar o Status de Servi\u00e7o Da Sefaz. StatusServicoTeste.java import br.com.swconsultoria.nfe.Nfe ; import br.com.swconsultoria.nfe.dom.ConfiguracoesNfe ; import br.com.swconsultoria.nfe.dom.enuns.DocumentoEnum ; import br.com.swconsultoria.nfe.schema_4.retConsStatServ.TRetConsStatServ ; /** * @author Samuel Oliveira */ public class StatusServicoTeste { public static void main ( String [] args ) { try { // Inicia As Configura\u00e7\u00f5es (1) ConfiguracoesNfe config = Config . iniciaConfiguracoes (); //Efetua Consulta TRetConsStatServ retorno = Nfe . statusServico ( config , DocumentoEnum . NFE ); //Resultado System . out . println (); System . out . println ( \"# Status: \" + retorno . getCStat () + \" - \" + retorno . getXMotivo ()); } catch ( Exception e ) { System . err . println ( \"# Erro: \" + e . getMessage ()); } } } Acesse o menu Configura\u00e7\u00f5es (Certificado)","title":"Status de Servi\u00e7o"}]}